/* Generated by restful-react */

import React from "react";
import {
  Get,
  GetProps,
  useGet,
  UseGetProps,
  Mutate,
  MutateProps,
  useMutate,
  UseMutateProps,
} from "restful-react";
export const SPEC_VERSION = "0.0.0";
export interface AccountLinks {
  url: string;
  created: string;
  expires_at: string;
}

export interface AddContactRequest {
  email: string;
  firstname: string;
}

/**
 * Serializer for Age Groups (Kids, Adult)
 */
export interface AgeGroup {
  uid?: string;
  name: string;
  icon?: string | null;
}

export interface AppleSocialAuth {
  id_token: string;
}

export interface AuthError {
  detail: string;
  code: string;
}

export interface Banner {
  uid: string;
  experience?: string;
  image: string;
}

// tslint:disable-next-line:no-empty-interface
export interface BlankEnum {}

export interface CreateSetupIntent {
  customer_secret: string;
}

export interface CustomerAddress {
  city: string;
  country: string;
  line1: string;
  line2: string;
  postal_code: string;
  state: string;
}

export interface Email {
  email: string;
}

export interface EmailVerification {
  token: string;
}

/**
 * Base Read-Only Class for Serializing Experiences
 */
export interface Experience {
  uid: string;
  title: string;
  description: string;
  banner: Banner;
  gallery: GalleryImage[];
  reviews: ExperienceCustomerReview[];
  avg_review_score: number;
  owner: string;
  experience_type?: {};
}

export interface ExperienceCustomerReview {
  uid: string;
  experience: string;
  author: string;
  text?: string;
  score_content: number;
  score_social: number;
  score_scheduling: number;
  score_location?: number | null;
  avg_score: number;
}

/**
 * Handles serialization of facebook related data
 */
export interface FacebookSocialAuth {
  auth_token: string;
}

export interface GalleryImage {
  uid?: string;
  experience?: string;
  image: string;
}

/**
 * Serializer of Music Genres
 */
export interface Genre {
  uid?: string;
  name: string;
  icon?: string | null;
}

export interface GoogleSocialAuth {
  auth_token: string;
}

/**
 * Base Read-Only Class for Serializing Experiences
 */
export interface GroupLesson {
  uid: string;
  owner: PublicUser;
  groups: GroupLessonGroup[];
  title: string;
  description: string;
  age_group: number | null;
  instrument: Instrument;
  genre: Genre;
  lesson_level: LessonLevel;
  reviews: ExperienceCustomerReview[];
  avg_review_score: number;
  /**
   * Timestamp of creation
   */
  created: string;
  /**
   * Timestamp of last modification
   */
  modified: string;
}

export interface GroupLessonCreate {
  uid?: string;
  groups: GroupLessonGroupCreate[];
  title: string;
  description: string;
  age_group: string;
  instrument: string;
  genre?: string | null;
  lesson_level: string;
  /**
   * Timestamp of creation
   */
  created: string;
  /**
   * Timestamp of last modification
   */
  modified: string;
  accept_tos: boolean;
}

export interface GroupLessonGroup {
  uid?: string;
  title: string;
  base_unit_amount: number;
  subscription_types: GroupLessonSubscriptionType[];
  time_slot_booking: TimeSlotBooking;
  location: PublicLocation;
  for_kids?: boolean;
  online?: boolean;
  offline?: boolean;
}

export interface GroupLessonGroupCreate {
  uid?: string;
  title: string;
  base_unit_amount: number;
  subscription_types: SubscriptionIntervalsEnum[];
  n_students_min?: number;
  n_students_max: number;
  time_slot: string;
  location: string;
  period: PeriodEnum;
  for_kids?: boolean;
  online?: boolean;
  offline?: boolean;
}

export interface GroupLessonSubscriptionType {
  uid: string;
  monthly_amount: number;
  fee_amount: number;
  interval_count: SubscriptionIntervalsEnum;
  discount_percent: number;
}

/**
 * Serializer for Instruments
 */
export interface Instrument {
  uid?: string;
  name: string;
  icon?: string | null;
}

export interface InviteFriend {
  emails: {}[];
}

/**
 * Serializer for Lesson Levels (Beginner, Intermediate, Expert)
 */
export interface LessonLevel {
  uid?: string;
  name: string;
  icon?: string | null;
}

/**
 * Serializer for Lesson Types (Single, Group, etc...)
 */
export interface LessonType {
  uid?: string;
  name: string;
  icon?: string | null;
}

// tslint:disable-next-line:no-empty-interface
export interface NullEnum {}

export interface PaginatedAgeGroupList {
  count?: number;
  next?: string | null;
  previous?: string | null;
  results?: AgeGroup[];
}

export interface PaginatedExperienceCustomerReviewList {
  count?: number;
  next?: string | null;
  previous?: string | null;
  results?: ExperienceCustomerReview[];
}

export interface PaginatedGalleryImageList {
  count?: number;
  next?: string | null;
  previous?: string | null;
  results?: GalleryImage[];
}

export interface PaginatedGenreList {
  count?: number;
  next?: string | null;
  previous?: string | null;
  results?: Genre[];
}

export interface PaginatedGroupLessonList {
  count?: number;
  next?: string | null;
  previous?: string | null;
  results?: GroupLesson[];
}

export interface PaginatedInstrumentList {
  count?: number;
  next?: string | null;
  previous?: string | null;
  results?: Instrument[];
}

export interface PaginatedLessonTypeList {
  count?: number;
  next?: string | null;
  previous?: string | null;
  results?: LessonType[];
}

export interface PaginatedPaymentMethodList {
  count?: number;
  next?: string | null;
  previous?: string | null;
  results?: PaymentMethod[];
}

export interface PaginatedPolymorphicBookingList {
  count?: number;
  next?: string | null;
  previous?: string | null;
  results?: PolymorphicBooking[];
}

export interface PaginatedPolymorphicExperienceList {
  count?: number;
  next?: string | null;
  previous?: string | null;
  results?: PolymorphicExperience[];
}

export interface PaginatedPrivateLessonBookingList {
  count?: number;
  next?: string | null;
  previous?: string | null;
  results?: PrivateLessonBooking[];
}

export interface PaginatedPrivateLessonList {
  count?: number;
  next?: string | null;
  previous?: string | null;
  results?: PrivateLesson[];
}

export interface PaginatedPrivateLocationList {
  count?: number;
  next?: string | null;
  previous?: string | null;
  results?: PrivateLocation[];
}

export interface PaginatedTeacherApplicationList {
  count?: number;
  next?: string | null;
  previous?: string | null;
  results?: TeacherApplication[];
}

export interface PasswordToken {
  password: string;
  token: string;
}

export interface PatchedExperienceCustomerReview {
  uid?: string;
  experience?: string;
  author?: string;
  text?: string;
  score_content?: number;
  score_social?: number;
  score_scheduling?: number;
  score_location?: number | null;
  avg_score?: number;
}

/**
 * Base Read-Only Class for Serializing Experiences
 */
export interface PatchedGroupLesson {
  uid?: string;
  owner?: PublicUser;
  groups?: GroupLessonGroup[];
  title?: string;
  description?: string;
  age_group?: number | null;
  instrument?: Instrument;
  genre?: Genre;
  lesson_level?: LessonLevel;
  reviews?: ExperienceCustomerReview[];
  avg_review_score?: number;
  /**
   * Timestamp of creation
   */
  created?: string;
  /**
   * Timestamp of last modification
   */
  modified?: string;
}

/**
 * Base Read-Only Class for Serializing Experiences
 */
export interface PatchedPrivateLesson {
  uid?: string;
  owner?: PublicUser;
  title?: string;
  description?: string;
  banner?: Banner;
  for_kids?: boolean;
  at_home?: boolean;
  online?: boolean;
  offline?: boolean;
  age_group?: number | null;
  instrument?: Instrument;
  genre?: Genre;
  lesson_level?: LessonLevel;
  locations?: PublicLocation[];
  base_unit_amount?: number;
  time_slots?: TimeSlot[];
  gallery?: GalleryImage[];
  subscription_types?: PrivateSubscriptionType[];
  reviews?: ExperienceCustomerReview[];
  avg_review_score?: number;
  /**
   * Timestamp of creation
   */
  created?: string;
  /**
   * Timestamp of last modification
   */
  modified?: string;
}

/**
 * Serializer for User Models
 */
export interface PatchedPrivateUser {
  id?: string;
  email?: string;
  is_verified?: boolean;
  is_teacher?: boolean;
  is_super_teacher?: boolean;
}

/**
 * Serializer for Teacher
 */
export interface PatchedTeacher {
  id?: number;
  locations?: PrivateLocation[];
}

/**
 * Serializer for User Profile Information
 */
export interface PatchedUserProfile {
  first_name?: string;
  last_name?: string;
  address?: CustomerAddress | null;
  avatar?: string | null;
  user_type?: UserTypeEnum | BlankEnum | NullEnum | null;
  birthday?: string | null;
  gender?: string | null;
  about?: string | null;
  instruments?: number[];
  favourite_genres?: number[];
}

export interface PaymentMethod {
  id: string;
  /**
   * The type of the PaymentMethod.
   */
  type: PaymentMethodTypeEnum;
  /**
   * Additional information for payment methods of type `card`
   */
  card: { [key: string]: any } | null;
  /**
   * Billing information associated with the PaymentMethod that may be used or required by particular types of payment methods.
   */
  billing_details: { [key: string]: any };
}

export type PaymentMethodTypeEnum =
  | "acss_debit"
  | "afterpay_clearpay"
  | "alipay"
  | "au_becs_debit"
  | "bacs_debit"
  | "bancontact"
  | "boleto"
  | "card"
  | "card_present"
  | "eps"
  | "fpx"
  | "giropay"
  | "grabpay"
  | "ideal"
  | "interac_present"
  | "klarna"
  | "oxxo"
  | "p24"
  | "sepa_debit"
  | "sofort"
  | "wechat_pay";

export type PeriodEnum = 2 | 4;

export type PolymorphicBooking = PrivateLessonBooking;

export type PolymorphicExperience = Experience | PrivateLesson;

/**
 * Base Read-Only Class for Serializing Experiences
 */
export interface PrivateLesson {
  uid: string;
  owner: PublicUser;
  title: string;
  description: string;
  banner: Banner;
  for_kids: boolean;
  at_home: boolean;
  online: boolean;
  offline: boolean;
  age_group: number | null;
  instrument: Instrument;
  genre: Genre;
  lesson_level: LessonLevel;
  locations: PublicLocation[];
  base_unit_amount: number;
  time_slots: TimeSlot[];
  gallery: GalleryImage[];
  subscription_types: PrivateSubscriptionType[];
  reviews: ExperienceCustomerReview[];
  avg_review_score: number;
  /**
   * Timestamp of creation
   */
  created: string;
  /**
   * Timestamp of last modification
   */
  modified: string;
  experience_type?: {};
}

export interface PrivateLessonBooking {
  uid: string;
  state: string;
  teacher: string;
  lesson: string;
  location: string;
  payment_method: string;
  subscription_type: string;
  stripe_subscription: number | null;
  time_slot_bookings: TimeSlotBooking[];
  /**
   * Timestamp of cration
   */
  created: string;
  /**
   * Timestamp of last modification
   */
  modified: string;
  /**
   * Timestamp of beginning of booking
   */
  started: string | null;
  /**
   * Timestamp of latest processed charge
   */
  last_charged: string | null;
  resourcetype?: {};
}

export interface PrivateLessonCreate {
  uid?: string;
  title: string;
  description: string;
  banner?: string;
  for_kids?: boolean;
  at_home?: boolean;
  online?: boolean;
  offline?: boolean;
  age_group: string;
  instrument: string;
  genre?: string | null;
  lesson_level: string;
  subscription_types: SubscriptionIntervalsEnum[];
  base_unit_amount: number;
  time_slots: string[];
  gallery?: string[];
  locations: string[];
  /**
   * Timestamp of creation
   */
  created: string;
  /**
   * Timestamp of last modification
   */
  modified: string;
  accept_tos: boolean;
}

/**
 * Serializer for Locations
 */
export interface PrivateLocation {
  uid: string;
  name: string;
  address: string;
  coordinates: {
    type?: string;
    coordinates?: [number, number];
  };
}

export interface PrivateSubscriptionType {
  uid?: string;
  active?: boolean;
  discount_percent: number;
  interval_count: SubscriptionIntervalsEnum;
}

/**
 * Serializer for User Models
 */
export interface PrivateUser {
  id: string;
  email: string;
  is_verified: boolean;
  is_teacher: boolean;
  is_super_teacher: boolean;
}

/**
 * Public view of Locations
 */
export interface PublicLocation {
  uid: string;
  name: string;
  coordinates: {
    type?: string;
    coordinates?: [number, number];
  };
}

/**
 * Serializer for displaying an users information
 */
export interface PublicUser {
  id: string;
  profile: UserProfile;
  is_teacher: boolean;
  is_super_teacher: boolean;
}

export interface ResetToken {
  token: string;
}

export interface SendVerificationEmailResponse {
  success: boolean;
  message: string;
}

/**
 * Handles serialization of Spotipy related data
 */
export interface SpotifyAuth {
  auth_token: string;
}

export interface StripeAccountDashboard {
  dashboard_url: string;
}

export interface StripeExternalAccount {
  name: string;
  type: StripeExternalAccountTypeEnum;
  last4: string;
  currency: string;
  is_default: boolean;
}

export type StripeExternalAccountTypeEnum = "bank_account" | "card";

export type SubscriptionIntervalsEnum = 1 | 3 | 6 | 12;

/**
 * Serializer for Teacher
 */
export interface Teacher {
  id: number;
  locations: PrivateLocation[];
}

/**
 * Serializer for Teacher Application
 */
export interface TeacherApplication {
  experience_instruments: string;
  experience_teaching: string;
  education_motivation: string;
  lesson_types: string[];
  age_groups: string[];
  instruments: string[];
  lesson_levels: string[];
}

export interface TimeSlot {
  uid?: string;
  start_date: string;
  start_time: string;
  period: PeriodEnum;
}

export interface TimeSlotBooking {
  uid: string;
  active: boolean;
  time_slot: string;
  period: PeriodEnum;
  start_date: string;
}

export interface TokenObtainPair {
  email: string;
  password: string;
  access: string;
  refresh: string;
}

export interface TokenPairResponse {
  access: string;
  refresh: string;
}

export interface TokenRefresh {
  access: string;
  refresh: string;
}

export interface TokenRefreshResponse {
  refresh: string;
}

export interface TokenVerify {
  token: string;
}

export interface TokenVerifyResponse {
  token: string;
}

/**
 * Serializer for Creating User Models
 */
export interface UserCreate {
  id: string;
  email: string;
  password: string;
  is_verified: boolean;
}

/**
 * Serializer for User Profile Information
 */
export interface UserProfile {
  first_name: string;
  last_name: string;
  address?: CustomerAddress | null;
  avatar?: string | null;
  user_type?: UserTypeEnum | BlankEnum | NullEnum | null;
  birthday?: string | null;
  gender?: string | null;
  about?: string | null;
  instruments: number[];
  favourite_genres: number[];
}

export type UserTypeEnum = "BEG" | "HOB" | "STU" | "PRO";

export type AddTeaserContactCreateProps = Omit<
  MutateProps<void, unknown, void, AddContactRequest, void>,
  "path" | "verb"
>;

export const AddTeaserContactCreate = (props: AddTeaserContactCreateProps) => (
  <Mutate<void, unknown, void, AddContactRequest, void>
    verb="POST"
    path={`/api/add-teaser-contact/`}
    {...props}
  />
);

export type UseAddTeaserContactCreateProps = Omit<
  UseMutateProps<void, unknown, void, AddContactRequest, void>,
  "path" | "verb"
>;

export const useAddTeaserContactCreate = (
  props: UseAddTeaserContactCreateProps
) =>
  useMutate<void, unknown, void, AddContactRequest, void>(
    "POST",
    `/api/add-teaser-contact/`,
    props
  );

export interface AgeGroupListQueryParams {
  /**
   * Number of results to return per page.
   */
  limit?: number;
  /**
   * The initial index from which to return the results.
   */
  offset?: number;
}

export type AgeGroupListProps = Omit<
  GetProps<PaginatedAgeGroupList, unknown, AgeGroupListQueryParams, void>,
  "path"
>;

/**
 * A simple ViewSet for viewing the different Age Groups
 */
export const AgeGroupList = (props: AgeGroupListProps) => (
  <Get<PaginatedAgeGroupList, unknown, AgeGroupListQueryParams, void>
    path={`/api/age-group/`}
    {...props}
  />
);

export type UseAgeGroupListProps = Omit<
  UseGetProps<PaginatedAgeGroupList, unknown, AgeGroupListQueryParams, void>,
  "path"
>;

/**
 * A simple ViewSet for viewing the different Age Groups
 */
export const useAgeGroupList = (props: UseAgeGroupListProps) =>
  useGet<PaginatedAgeGroupList, unknown, AgeGroupListQueryParams, void>(
    `/api/age-group/`,
    props
  );

export interface AgeGroupRetrievePathParams {
  uid: string;
}

export type AgeGroupRetrieveProps = Omit<
  GetProps<AgeGroup, unknown, void, AgeGroupRetrievePathParams>,
  "path"
> &
  AgeGroupRetrievePathParams;

/**
 * A simple ViewSet for viewing the different Age Groups
 */
export const AgeGroupRetrieve = ({ uid, ...props }: AgeGroupRetrieveProps) => (
  <Get<AgeGroup, unknown, void, AgeGroupRetrievePathParams>
    path={`/api/age-group/${uid}/`}
    {...props}
  />
);

export type UseAgeGroupRetrieveProps = Omit<
  UseGetProps<AgeGroup, unknown, void, AgeGroupRetrievePathParams>,
  "path"
> &
  AgeGroupRetrievePathParams;

/**
 * A simple ViewSet for viewing the different Age Groups
 */
export const useAgeGroupRetrieve = ({
  uid,
  ...props
}: UseAgeGroupRetrieveProps) =>
  useGet<AgeGroup, unknown, void, AgeGroupRetrievePathParams>(
    (paramsInPath: AgeGroupRetrievePathParams) =>
      `/api/age-group/${paramsInPath.uid}/`,
    { pathParams: { uid }, ...props }
  );

export type BecomeTeacherRetrieveProps = Omit<
  GetProps<TeacherApplication, unknown, void, void>,
  "path"
>;

/**
 * A simple ViewSet for creating a new application.
 */
export const BecomeTeacherRetrieve = (props: BecomeTeacherRetrieveProps) => (
  <Get<TeacherApplication, unknown, void, void>
    path={`/api/become-teacher`}
    {...props}
  />
);

export type UseBecomeTeacherRetrieveProps = Omit<
  UseGetProps<TeacherApplication, unknown, void, void>,
  "path"
>;

/**
 * A simple ViewSet for creating a new application.
 */
export const useBecomeTeacherRetrieve = (
  props: UseBecomeTeacherRetrieveProps
) =>
  useGet<TeacherApplication, unknown, void, void>(`/api/become-teacher`, props);

export type BecomeTeacherCreateProps = Omit<
  MutateProps<TeacherApplication, unknown, void, TeacherApplication, void>,
  "path" | "verb"
>;

/**
 * A simple ViewSet for creating a new application.
 */
export const BecomeTeacherCreate = (props: BecomeTeacherCreateProps) => (
  <Mutate<TeacherApplication, unknown, void, TeacherApplication, void>
    verb="POST"
    path={`/api/become-teacher`}
    {...props}
  />
);

export type UseBecomeTeacherCreateProps = Omit<
  UseMutateProps<TeacherApplication, unknown, void, TeacherApplication, void>,
  "path" | "verb"
>;

/**
 * A simple ViewSet for creating a new application.
 */
export const useBecomeTeacherCreate = (props: UseBecomeTeacherCreateProps) =>
  useMutate<TeacherApplication, unknown, void, TeacherApplication, void>(
    "POST",
    `/api/become-teacher`,
    props
  );

export interface BookingsListQueryParams {
  /**
   * Number of results to return per page.
   */
  limit?: number;
  /**
   * The initial index from which to return the results.
   */
  offset?: number;
}

export type BookingsListProps = Omit<
  GetProps<
    PaginatedPolymorphicBookingList,
    unknown,
    BookingsListQueryParams,
    void
  >,
  "path"
>;

/**
 * A viewset for listing all current bookings
 */
export const BookingsList = (props: BookingsListProps) => (
  <Get<PaginatedPolymorphicBookingList, unknown, BookingsListQueryParams, void>
    path={`/api/bookings/`}
    {...props}
  />
);

export type UseBookingsListProps = Omit<
  UseGetProps<
    PaginatedPolymorphicBookingList,
    unknown,
    BookingsListQueryParams,
    void
  >,
  "path"
>;

/**
 * A viewset for listing all current bookings
 */
export const useBookingsList = (props: UseBookingsListProps) =>
  useGet<
    PaginatedPolymorphicBookingList,
    unknown,
    BookingsListQueryParams,
    void
  >(`/api/bookings/`, props);

export interface BookingsRetrievePathParams {
  uid: string;
}

export type BookingsRetrieveProps = Omit<
  GetProps<PolymorphicBooking, unknown, void, BookingsRetrievePathParams>,
  "path"
> &
  BookingsRetrievePathParams;

/**
 * A viewset for listing all current bookings
 */
export const BookingsRetrieve = ({ uid, ...props }: BookingsRetrieveProps) => (
  <Get<PolymorphicBooking, unknown, void, BookingsRetrievePathParams>
    path={`/api/bookings/${uid}/`}
    {...props}
  />
);

export type UseBookingsRetrieveProps = Omit<
  UseGetProps<PolymorphicBooking, unknown, void, BookingsRetrievePathParams>,
  "path"
> &
  BookingsRetrievePathParams;

/**
 * A viewset for listing all current bookings
 */
export const useBookingsRetrieve = ({
  uid,
  ...props
}: UseBookingsRetrieveProps) =>
  useGet<PolymorphicBooking, unknown, void, BookingsRetrievePathParams>(
    (paramsInPath: BookingsRetrievePathParams) =>
      `/api/bookings/${paramsInPath.uid}/`,
    { pathParams: { uid }, ...props }
  );

export type EmailVerifyCreateProps = Omit<
  MutateProps<EmailVerification, unknown, void, EmailVerification, void>,
  "path" | "verb"
>;

export const EmailVerifyCreate = (props: EmailVerifyCreateProps) => (
  <Mutate<EmailVerification, unknown, void, EmailVerification, void>
    verb="POST"
    path={`/api/email-verify/`}
    {...props}
  />
);

export type UseEmailVerifyCreateProps = Omit<
  UseMutateProps<EmailVerification, unknown, void, EmailVerification, void>,
  "path" | "verb"
>;

export const useEmailVerifyCreate = (props: UseEmailVerifyCreateProps) =>
  useMutate<EmailVerification, unknown, void, EmailVerification, void>(
    "POST",
    `/api/email-verify/`,
    props
  );

export interface ExperienceListQueryParams {
  /**
   * Age Group
   */
  age_group?: string;
  /**
   * minimum distance from current location
   */
  distance_gt?: number;
  /**
   * maximum distance from current location
   */
  distance_lt?: number;
  /**
   * Lesson Type
   */
  experience_type?: ("grouplesson" | "privatelesson")[];
  /**
   * Is a "For Kids" lesson
   */
  for_kids?: boolean;
  /**
   * Genre
   */
  genre?: string;
  /**
   * Instrument
   */
  instrument?: string;
  /**
   * latitude of current location
   */
  lat?: number;
  /**
   * Number of results to return per page.
   */
  limit?: number;
  /**
   * longitude of current location
   */
  lng?: number;
  /**
   * The initial index from which to return the results.
   */
  offset?: number;
  /**
   * Base Price Greater or Equal
   */
  price_gte?: number;
  /**
   * Base Price Less or Equal
   */
  price_lte?: number;
  /**
   * Which weekdays are they available
   */
  time_slot_week_day?: ("1" | "2" | "3" | "4" | "5" | "6" | "7")[];
  title__icontains?: string;
}

export type ExperienceListProps = Omit<
  GetProps<
    PaginatedPolymorphicExperienceList,
    unknown,
    ExperienceListQueryParams,
    void
  >,
  "path"
>;

/**
 * A viewset for viewing all Experiences
 */
export const ExperienceList = (props: ExperienceListProps) => (
  <Get<
    PaginatedPolymorphicExperienceList,
    unknown,
    ExperienceListQueryParams,
    void
  >
    path={`/api/experience/`}
    {...props}
  />
);

export type UseExperienceListProps = Omit<
  UseGetProps<
    PaginatedPolymorphicExperienceList,
    unknown,
    ExperienceListQueryParams,
    void
  >,
  "path"
>;

/**
 * A viewset for viewing all Experiences
 */
export const useExperienceList = (props: UseExperienceListProps) =>
  useGet<
    PaginatedPolymorphicExperienceList,
    unknown,
    ExperienceListQueryParams,
    void
  >(`/api/experience/`, props);

export interface ExperienceRetrieveQueryParams {
  /**
   * minimum distance from current location
   */
  distance_gt?: number;
  /**
   * maximum distance from current location
   */
  distance_lt?: number;
  /**
   * latitude of current location
   */
  lat?: number;
  /**
   * longitude of current location
   */
  lng?: number;
}

export interface ExperienceRetrievePathParams {
  uid: string;
}

export type ExperienceRetrieveProps = Omit<
  GetProps<
    PolymorphicExperience,
    unknown,
    ExperienceRetrieveQueryParams,
    ExperienceRetrievePathParams
  >,
  "path"
> &
  ExperienceRetrievePathParams;

/**
 * A viewset for viewing all Experiences
 */
export const ExperienceRetrieve = ({
  uid,
  ...props
}: ExperienceRetrieveProps) => (
  <Get<
    PolymorphicExperience,
    unknown,
    ExperienceRetrieveQueryParams,
    ExperienceRetrievePathParams
  >
    path={`/api/experience/${uid}/`}
    {...props}
  />
);

export type UseExperienceRetrieveProps = Omit<
  UseGetProps<
    PolymorphicExperience,
    unknown,
    ExperienceRetrieveQueryParams,
    ExperienceRetrievePathParams
  >,
  "path"
> &
  ExperienceRetrievePathParams;

/**
 * A viewset for viewing all Experiences
 */
export const useExperienceRetrieve = ({
  uid,
  ...props
}: UseExperienceRetrieveProps) =>
  useGet<
    PolymorphicExperience,
    unknown,
    ExperienceRetrieveQueryParams,
    ExperienceRetrievePathParams
  >(
    (paramsInPath: ExperienceRetrievePathParams) =>
      `/api/experience/${paramsInPath.uid}/`,
    { pathParams: { uid }, ...props }
  );

export type ExperienceBannerCreateProps = Omit<
  MutateProps<Banner, unknown, void, void, void>,
  "path" | "verb"
>;

/**
 * View for creating banner images (before they are initially set)
 */
export const ExperienceBannerCreate = (props: ExperienceBannerCreateProps) => (
  <Mutate<Banner, unknown, void, void, void>
    verb="POST"
    path={`/api/experience/banner`}
    {...props}
  />
);

export type UseExperienceBannerCreateProps = Omit<
  UseMutateProps<Banner, unknown, void, void, void>,
  "path" | "verb"
>;

/**
 * View for creating banner images (before they are initially set)
 */
export const useExperienceBannerCreate = (
  props: UseExperienceBannerCreateProps
) =>
  useMutate<Banner, unknown, void, void, void>(
    "POST",
    `/api/experience/banner`,
    props
  );

export type ExperienceGalleryCreateProps = Omit<
  MutateProps<void, unknown, void, void, void>,
  "path" | "verb"
>;

/**
 * incomplete!
 */
export const ExperienceGalleryCreate = (
  props: ExperienceGalleryCreateProps
) => (
  <Mutate<void, unknown, void, void, void>
    verb="POST"
    path={`/api/experience/gallery/`}
    {...props}
  />
);

export type UseExperienceGalleryCreateProps = Omit<
  UseMutateProps<void, unknown, void, void, void>,
  "path" | "verb"
>;

/**
 * incomplete!
 */
export const useExperienceGalleryCreate = (
  props: UseExperienceGalleryCreateProps
) =>
  useMutate<void, unknown, void, void, void>(
    "POST",
    `/api/experience/gallery/`,
    props
  );

export type ExperienceGalleryDestroyProps = Omit<
  MutateProps<void, unknown, void, string, void>,
  "path" | "verb"
>;

/**
 * incomplete!
 */
export const ExperienceGalleryDestroy = (
  props: ExperienceGalleryDestroyProps
) => (
  <Mutate<void, unknown, void, string, void>
    verb="DELETE"
    path={`/api/experience/gallery`}
    {...props}
  />
);

export type UseExperienceGalleryDestroyProps = Omit<
  UseMutateProps<void, unknown, void, string, void>,
  "path" | "verb"
>;

/**
 * incomplete!
 */
export const useExperienceGalleryDestroy = (
  props: UseExperienceGalleryDestroyProps
) =>
  useMutate<void, unknown, void, string, void>(
    "DELETE",
    `/api/experience/gallery`,
    { ...props }
  );

export interface ExperienceGroupLessonsListQueryParams {
  /**
   * Number of results to return per page.
   */
  limit?: number;
  /**
   * The initial index from which to return the results.
   */
  offset?: number;
}

export type ExperienceGroupLessonsListProps = Omit<
  GetProps<
    PaginatedGroupLessonList,
    unknown,
    ExperienceGroupLessonsListQueryParams,
    void
  >,
  "path"
>;

/**
 * A viewset for listing, creating, deleting and updating the current users group lessons
 */
export const ExperienceGroupLessonsList = (
  props: ExperienceGroupLessonsListProps
) => (
  <Get<
    PaginatedGroupLessonList,
    unknown,
    ExperienceGroupLessonsListQueryParams,
    void
  >
    path={`/api/experience/group/lessons/`}
    {...props}
  />
);

export type UseExperienceGroupLessonsListProps = Omit<
  UseGetProps<
    PaginatedGroupLessonList,
    unknown,
    ExperienceGroupLessonsListQueryParams,
    void
  >,
  "path"
>;

/**
 * A viewset for listing, creating, deleting and updating the current users group lessons
 */
export const useExperienceGroupLessonsList = (
  props: UseExperienceGroupLessonsListProps
) =>
  useGet<
    PaginatedGroupLessonList,
    unknown,
    ExperienceGroupLessonsListQueryParams,
    void
  >(`/api/experience/group/lessons/`, props);

export type ExperienceGroupLessonsCreateProps = Omit<
  MutateProps<GroupLessonCreate, unknown, void, GroupLessonCreate, void>,
  "path" | "verb"
>;

/**
 * A viewset for listing, creating, deleting and updating the current users group lessons
 */
export const ExperienceGroupLessonsCreate = (
  props: ExperienceGroupLessonsCreateProps
) => (
  <Mutate<GroupLessonCreate, unknown, void, GroupLessonCreate, void>
    verb="POST"
    path={`/api/experience/group/lessons/`}
    {...props}
  />
);

export type UseExperienceGroupLessonsCreateProps = Omit<
  UseMutateProps<GroupLessonCreate, unknown, void, GroupLessonCreate, void>,
  "path" | "verb"
>;

/**
 * A viewset for listing, creating, deleting and updating the current users group lessons
 */
export const useExperienceGroupLessonsCreate = (
  props: UseExperienceGroupLessonsCreateProps
) =>
  useMutate<GroupLessonCreate, unknown, void, GroupLessonCreate, void>(
    "POST",
    `/api/experience/group/lessons/`,
    props
  );

export interface ExperienceGroupLessonsRetrievePathParams {
  uid: string;
}

export type ExperienceGroupLessonsRetrieveProps = Omit<
  GetProps<
    GroupLesson,
    unknown,
    void,
    ExperienceGroupLessonsRetrievePathParams
  >,
  "path"
> &
  ExperienceGroupLessonsRetrievePathParams;

/**
 * A viewset for listing, creating, deleting and updating the current users group lessons
 */
export const ExperienceGroupLessonsRetrieve = ({
  uid,
  ...props
}: ExperienceGroupLessonsRetrieveProps) => (
  <Get<GroupLesson, unknown, void, ExperienceGroupLessonsRetrievePathParams>
    path={`/api/experience/group/lessons/${uid}/`}
    {...props}
  />
);

export type UseExperienceGroupLessonsRetrieveProps = Omit<
  UseGetProps<
    GroupLesson,
    unknown,
    void,
    ExperienceGroupLessonsRetrievePathParams
  >,
  "path"
> &
  ExperienceGroupLessonsRetrievePathParams;

/**
 * A viewset for listing, creating, deleting and updating the current users group lessons
 */
export const useExperienceGroupLessonsRetrieve = ({
  uid,
  ...props
}: UseExperienceGroupLessonsRetrieveProps) =>
  useGet<GroupLesson, unknown, void, ExperienceGroupLessonsRetrievePathParams>(
    (paramsInPath: ExperienceGroupLessonsRetrievePathParams) =>
      `/api/experience/group/lessons/${paramsInPath.uid}/`,
    { pathParams: { uid }, ...props }
  );

export interface ExperienceGroupLessonsUpdatePathParams {
  uid: string;
}

export type ExperienceGroupLessonsUpdateProps = Omit<
  MutateProps<
    GroupLesson,
    unknown,
    void,
    GroupLesson,
    ExperienceGroupLessonsUpdatePathParams
  >,
  "path" | "verb"
> &
  ExperienceGroupLessonsUpdatePathParams;

/**
 * A viewset for listing, creating, deleting and updating the current users group lessons
 */
export const ExperienceGroupLessonsUpdate = ({
  uid,
  ...props
}: ExperienceGroupLessonsUpdateProps) => (
  <Mutate<
    GroupLesson,
    unknown,
    void,
    GroupLesson,
    ExperienceGroupLessonsUpdatePathParams
  >
    verb="PUT"
    path={`/api/experience/group/lessons/${uid}/`}
    {...props}
  />
);

export type UseExperienceGroupLessonsUpdateProps = Omit<
  UseMutateProps<
    GroupLesson,
    unknown,
    void,
    GroupLesson,
    ExperienceGroupLessonsUpdatePathParams
  >,
  "path" | "verb"
> &
  ExperienceGroupLessonsUpdatePathParams;

/**
 * A viewset for listing, creating, deleting and updating the current users group lessons
 */
export const useExperienceGroupLessonsUpdate = ({
  uid,
  ...props
}: UseExperienceGroupLessonsUpdateProps) =>
  useMutate<
    GroupLesson,
    unknown,
    void,
    GroupLesson,
    ExperienceGroupLessonsUpdatePathParams
  >(
    "PUT",
    (paramsInPath: ExperienceGroupLessonsUpdatePathParams) =>
      `/api/experience/group/lessons/${paramsInPath.uid}/`,
    { pathParams: { uid }, ...props }
  );

export interface ExperienceGroupLessonsPartialUpdatePathParams {
  uid: string;
}

export type ExperienceGroupLessonsPartialUpdateProps = Omit<
  MutateProps<
    GroupLesson,
    unknown,
    void,
    PatchedGroupLesson,
    ExperienceGroupLessonsPartialUpdatePathParams
  >,
  "path" | "verb"
> &
  ExperienceGroupLessonsPartialUpdatePathParams;

/**
 * A viewset for listing, creating, deleting and updating the current users group lessons
 */
export const ExperienceGroupLessonsPartialUpdate = ({
  uid,
  ...props
}: ExperienceGroupLessonsPartialUpdateProps) => (
  <Mutate<
    GroupLesson,
    unknown,
    void,
    PatchedGroupLesson,
    ExperienceGroupLessonsPartialUpdatePathParams
  >
    verb="PATCH"
    path={`/api/experience/group/lessons/${uid}/`}
    {...props}
  />
);

export type UseExperienceGroupLessonsPartialUpdateProps = Omit<
  UseMutateProps<
    GroupLesson,
    unknown,
    void,
    PatchedGroupLesson,
    ExperienceGroupLessonsPartialUpdatePathParams
  >,
  "path" | "verb"
> &
  ExperienceGroupLessonsPartialUpdatePathParams;

/**
 * A viewset for listing, creating, deleting and updating the current users group lessons
 */
export const useExperienceGroupLessonsPartialUpdate = ({
  uid,
  ...props
}: UseExperienceGroupLessonsPartialUpdateProps) =>
  useMutate<
    GroupLesson,
    unknown,
    void,
    PatchedGroupLesson,
    ExperienceGroupLessonsPartialUpdatePathParams
  >(
    "PATCH",
    (paramsInPath: ExperienceGroupLessonsPartialUpdatePathParams) =>
      `/api/experience/group/lessons/${paramsInPath.uid}/`,
    { pathParams: { uid }, ...props }
  );

export type ExperienceGroupLessonsDestroyProps = Omit<
  MutateProps<void, unknown, void, string, void>,
  "path" | "verb"
>;

/**
 * A viewset for listing, creating, deleting and updating the current users group lessons
 */
export const ExperienceGroupLessonsDestroy = (
  props: ExperienceGroupLessonsDestroyProps
) => (
  <Mutate<void, unknown, void, string, void>
    verb="DELETE"
    path={`/api/experience/group/lessons`}
    {...props}
  />
);

export type UseExperienceGroupLessonsDestroyProps = Omit<
  UseMutateProps<void, unknown, void, string, void>,
  "path" | "verb"
>;

/**
 * A viewset for listing, creating, deleting and updating the current users group lessons
 */
export const useExperienceGroupLessonsDestroy = (
  props: UseExperienceGroupLessonsDestroyProps
) =>
  useMutate<void, unknown, void, string, void>(
    "DELETE",
    `/api/experience/group/lessons`,
    { ...props }
  );

export interface ExperiencePrivateBookingsStudentListQueryParams {
  /**
   * Number of results to return per page.
   */
  limit?: number;
  /**
   * The initial index from which to return the results.
   */
  offset?: number;
  state?: string;
}

export type ExperiencePrivateBookingsStudentListProps = Omit<
  GetProps<
    PaginatedPrivateLessonBookingList,
    unknown,
    ExperiencePrivateBookingsStudentListQueryParams,
    void
  >,
  "path"
>;

/**
 * A viewset for managing the current users booked lessons
 */
export const ExperiencePrivateBookingsStudentList = (
  props: ExperiencePrivateBookingsStudentListProps
) => (
  <Get<
    PaginatedPrivateLessonBookingList,
    unknown,
    ExperiencePrivateBookingsStudentListQueryParams,
    void
  >
    path={`/api/experience/private/bookings/student/`}
    {...props}
  />
);

export type UseExperiencePrivateBookingsStudentListProps = Omit<
  UseGetProps<
    PaginatedPrivateLessonBookingList,
    unknown,
    ExperiencePrivateBookingsStudentListQueryParams,
    void
  >,
  "path"
>;

/**
 * A viewset for managing the current users booked lessons
 */
export const useExperiencePrivateBookingsStudentList = (
  props: UseExperiencePrivateBookingsStudentListProps
) =>
  useGet<
    PaginatedPrivateLessonBookingList,
    unknown,
    ExperiencePrivateBookingsStudentListQueryParams,
    void
  >(`/api/experience/private/bookings/student/`, props);

export type ExperiencePrivateBookingsStudentCreateProps = Omit<
  MutateProps<PrivateLessonBooking, unknown, void, PrivateLessonBooking, void>,
  "path" | "verb"
>;

/**
 * A viewset for managing the current users booked lessons
 */
export const ExperiencePrivateBookingsStudentCreate = (
  props: ExperiencePrivateBookingsStudentCreateProps
) => (
  <Mutate<PrivateLessonBooking, unknown, void, PrivateLessonBooking, void>
    verb="POST"
    path={`/api/experience/private/bookings/student/`}
    {...props}
  />
);

export type UseExperiencePrivateBookingsStudentCreateProps = Omit<
  UseMutateProps<
    PrivateLessonBooking,
    unknown,
    void,
    PrivateLessonBooking,
    void
  >,
  "path" | "verb"
>;

/**
 * A viewset for managing the current users booked lessons
 */
export const useExperiencePrivateBookingsStudentCreate = (
  props: UseExperiencePrivateBookingsStudentCreateProps
) =>
  useMutate<PrivateLessonBooking, unknown, void, PrivateLessonBooking, void>(
    "POST",
    `/api/experience/private/bookings/student/`,
    props
  );

export interface ExperiencePrivateBookingsStudentRetrievePathParams {
  uid: string;
}

export type ExperiencePrivateBookingsStudentRetrieveProps = Omit<
  GetProps<
    PrivateLessonBooking,
    unknown,
    void,
    ExperiencePrivateBookingsStudentRetrievePathParams
  >,
  "path"
> &
  ExperiencePrivateBookingsStudentRetrievePathParams;

/**
 * A viewset for managing the current users booked lessons
 */
export const ExperiencePrivateBookingsStudentRetrieve = ({
  uid,
  ...props
}: ExperiencePrivateBookingsStudentRetrieveProps) => (
  <Get<
    PrivateLessonBooking,
    unknown,
    void,
    ExperiencePrivateBookingsStudentRetrievePathParams
  >
    path={`/api/experience/private/bookings/student/${uid}/`}
    {...props}
  />
);

export type UseExperiencePrivateBookingsStudentRetrieveProps = Omit<
  UseGetProps<
    PrivateLessonBooking,
    unknown,
    void,
    ExperiencePrivateBookingsStudentRetrievePathParams
  >,
  "path"
> &
  ExperiencePrivateBookingsStudentRetrievePathParams;

/**
 * A viewset for managing the current users booked lessons
 */
export const useExperiencePrivateBookingsStudentRetrieve = ({
  uid,
  ...props
}: UseExperiencePrivateBookingsStudentRetrieveProps) =>
  useGet<
    PrivateLessonBooking,
    unknown,
    void,
    ExperiencePrivateBookingsStudentRetrievePathParams
  >(
    (paramsInPath: ExperiencePrivateBookingsStudentRetrievePathParams) =>
      `/api/experience/private/bookings/student/${paramsInPath.uid}/`,
    { pathParams: { uid }, ...props }
  );

export interface ExperiencePrivateBookingsTeacherListQueryParams {
  /**
   * Number of results to return per page.
   */
  limit?: number;
  /**
   * The initial index from which to return the results.
   */
  offset?: number;
  state?: string;
}

export type ExperiencePrivateBookingsTeacherListProps = Omit<
  GetProps<
    PaginatedPrivateLessonBookingList,
    unknown,
    ExperiencePrivateBookingsTeacherListQueryParams,
    void
  >,
  "path"
>;

/**
 * A viewset for managing bookings of the current teachers private lessons
 */
export const ExperiencePrivateBookingsTeacherList = (
  props: ExperiencePrivateBookingsTeacherListProps
) => (
  <Get<
    PaginatedPrivateLessonBookingList,
    unknown,
    ExperiencePrivateBookingsTeacherListQueryParams,
    void
  >
    path={`/api/experience/private/bookings/teacher/`}
    {...props}
  />
);

export type UseExperiencePrivateBookingsTeacherListProps = Omit<
  UseGetProps<
    PaginatedPrivateLessonBookingList,
    unknown,
    ExperiencePrivateBookingsTeacherListQueryParams,
    void
  >,
  "path"
>;

/**
 * A viewset for managing bookings of the current teachers private lessons
 */
export const useExperiencePrivateBookingsTeacherList = (
  props: UseExperiencePrivateBookingsTeacherListProps
) =>
  useGet<
    PaginatedPrivateLessonBookingList,
    unknown,
    ExperiencePrivateBookingsTeacherListQueryParams,
    void
  >(`/api/experience/private/bookings/teacher/`, props);

export interface ExperiencePrivateBookingsTeacherRetrievePathParams {
  uid: string;
}

export type ExperiencePrivateBookingsTeacherRetrieveProps = Omit<
  GetProps<
    PrivateLessonBooking,
    unknown,
    void,
    ExperiencePrivateBookingsTeacherRetrievePathParams
  >,
  "path"
> &
  ExperiencePrivateBookingsTeacherRetrievePathParams;

/**
 * A viewset for managing bookings of the current teachers private lessons
 */
export const ExperiencePrivateBookingsTeacherRetrieve = ({
  uid,
  ...props
}: ExperiencePrivateBookingsTeacherRetrieveProps) => (
  <Get<
    PrivateLessonBooking,
    unknown,
    void,
    ExperiencePrivateBookingsTeacherRetrievePathParams
  >
    path={`/api/experience/private/bookings/teacher/${uid}/`}
    {...props}
  />
);

export type UseExperiencePrivateBookingsTeacherRetrieveProps = Omit<
  UseGetProps<
    PrivateLessonBooking,
    unknown,
    void,
    ExperiencePrivateBookingsTeacherRetrievePathParams
  >,
  "path"
> &
  ExperiencePrivateBookingsTeacherRetrievePathParams;

/**
 * A viewset for managing bookings of the current teachers private lessons
 */
export const useExperiencePrivateBookingsTeacherRetrieve = ({
  uid,
  ...props
}: UseExperiencePrivateBookingsTeacherRetrieveProps) =>
  useGet<
    PrivateLessonBooking,
    unknown,
    void,
    ExperiencePrivateBookingsTeacherRetrievePathParams
  >(
    (paramsInPath: ExperiencePrivateBookingsTeacherRetrievePathParams) =>
      `/api/experience/private/bookings/teacher/${paramsInPath.uid}/`,
    { pathParams: { uid }, ...props }
  );

export interface ExperiencePrivateBookingsTeacherAcceptCreatePathParams {
  uid: string;
}

export type ExperiencePrivateBookingsTeacherAcceptCreateProps = Omit<
  MutateProps<
    PrivateLessonBooking,
    unknown,
    void,
    void,
    ExperiencePrivateBookingsTeacherAcceptCreatePathParams
  >,
  "path" | "verb"
> &
  ExperiencePrivateBookingsTeacherAcceptCreatePathParams;

/**
 * Action that accepts an users Private Lesson Request
 */
export const ExperiencePrivateBookingsTeacherAcceptCreate = ({
  uid,
  ...props
}: ExperiencePrivateBookingsTeacherAcceptCreateProps) => (
  <Mutate<
    PrivateLessonBooking,
    unknown,
    void,
    void,
    ExperiencePrivateBookingsTeacherAcceptCreatePathParams
  >
    verb="POST"
    path={`/api/experience/private/bookings/teacher/${uid}/accept/`}
    {...props}
  />
);

export type UseExperiencePrivateBookingsTeacherAcceptCreateProps = Omit<
  UseMutateProps<
    PrivateLessonBooking,
    unknown,
    void,
    void,
    ExperiencePrivateBookingsTeacherAcceptCreatePathParams
  >,
  "path" | "verb"
> &
  ExperiencePrivateBookingsTeacherAcceptCreatePathParams;

/**
 * Action that accepts an users Private Lesson Request
 */
export const useExperiencePrivateBookingsTeacherAcceptCreate = ({
  uid,
  ...props
}: UseExperiencePrivateBookingsTeacherAcceptCreateProps) =>
  useMutate<
    PrivateLessonBooking,
    unknown,
    void,
    void,
    ExperiencePrivateBookingsTeacherAcceptCreatePathParams
  >(
    "POST",
    (paramsInPath: ExperiencePrivateBookingsTeacherAcceptCreatePathParams) =>
      `/api/experience/private/bookings/teacher/${paramsInPath.uid}/accept/`,
    { pathParams: { uid }, ...props }
  );

export interface ExperiencePrivateBookingsTeacherDeclineCreatePathParams {
  uid: string;
}

export type ExperiencePrivateBookingsTeacherDeclineCreateProps = Omit<
  MutateProps<
    PrivateLessonBooking,
    unknown,
    void,
    void,
    ExperiencePrivateBookingsTeacherDeclineCreatePathParams
  >,
  "path" | "verb"
> &
  ExperiencePrivateBookingsTeacherDeclineCreatePathParams;

/**
 * Action that declines an users Private Lesson Request
 */
export const ExperiencePrivateBookingsTeacherDeclineCreate = ({
  uid,
  ...props
}: ExperiencePrivateBookingsTeacherDeclineCreateProps) => (
  <Mutate<
    PrivateLessonBooking,
    unknown,
    void,
    void,
    ExperiencePrivateBookingsTeacherDeclineCreatePathParams
  >
    verb="POST"
    path={`/api/experience/private/bookings/teacher/${uid}/decline/`}
    {...props}
  />
);

export type UseExperiencePrivateBookingsTeacherDeclineCreateProps = Omit<
  UseMutateProps<
    PrivateLessonBooking,
    unknown,
    void,
    void,
    ExperiencePrivateBookingsTeacherDeclineCreatePathParams
  >,
  "path" | "verb"
> &
  ExperiencePrivateBookingsTeacherDeclineCreatePathParams;

/**
 * Action that declines an users Private Lesson Request
 */
export const useExperiencePrivateBookingsTeacherDeclineCreate = ({
  uid,
  ...props
}: UseExperiencePrivateBookingsTeacherDeclineCreateProps) =>
  useMutate<
    PrivateLessonBooking,
    unknown,
    void,
    void,
    ExperiencePrivateBookingsTeacherDeclineCreatePathParams
  >(
    "POST",
    (paramsInPath: ExperiencePrivateBookingsTeacherDeclineCreatePathParams) =>
      `/api/experience/private/bookings/teacher/${paramsInPath.uid}/decline/`,
    { pathParams: { uid }, ...props }
  );

export interface ExperiencePrivateGalleryListQueryParams {
  /**
   * Number of results to return per page.
   */
  limit?: number;
  /**
   * The initial index from which to return the results.
   */
  offset?: number;
}

export type ExperiencePrivateGalleryListProps = Omit<
  GetProps<
    PaginatedGalleryImageList,
    unknown,
    ExperiencePrivateGalleryListQueryParams,
    void
  >,
  "path"
>;

export const ExperiencePrivateGalleryList = (
  props: ExperiencePrivateGalleryListProps
) => (
  <Get<
    PaginatedGalleryImageList,
    unknown,
    ExperiencePrivateGalleryListQueryParams,
    void
  >
    path={`/api/experience/private/gallery/`}
    {...props}
  />
);

export type UseExperiencePrivateGalleryListProps = Omit<
  UseGetProps<
    PaginatedGalleryImageList,
    unknown,
    ExperiencePrivateGalleryListQueryParams,
    void
  >,
  "path"
>;

export const useExperiencePrivateGalleryList = (
  props: UseExperiencePrivateGalleryListProps
) =>
  useGet<
    PaginatedGalleryImageList,
    unknown,
    ExperiencePrivateGalleryListQueryParams,
    void
  >(`/api/experience/private/gallery/`, props);

export type ExperiencePrivateGalleryCreateProps = Omit<
  MutateProps<GalleryImage, unknown, void, GalleryImage, void>,
  "path" | "verb"
>;

export const ExperiencePrivateGalleryCreate = (
  props: ExperiencePrivateGalleryCreateProps
) => (
  <Mutate<GalleryImage, unknown, void, GalleryImage, void>
    verb="POST"
    path={`/api/experience/private/gallery/`}
    {...props}
  />
);

export type UseExperiencePrivateGalleryCreateProps = Omit<
  UseMutateProps<GalleryImage, unknown, void, GalleryImage, void>,
  "path" | "verb"
>;

export const useExperiencePrivateGalleryCreate = (
  props: UseExperiencePrivateGalleryCreateProps
) =>
  useMutate<GalleryImage, unknown, void, GalleryImage, void>(
    "POST",
    `/api/experience/private/gallery/`,
    props
  );

export interface ExperiencePrivateGalleryRetrievePathParams {
  uid: string;
}

export type ExperiencePrivateGalleryRetrieveProps = Omit<
  GetProps<
    GalleryImage,
    unknown,
    void,
    ExperiencePrivateGalleryRetrievePathParams
  >,
  "path"
> &
  ExperiencePrivateGalleryRetrievePathParams;

export const ExperiencePrivateGalleryRetrieve = ({
  uid,
  ...props
}: ExperiencePrivateGalleryRetrieveProps) => (
  <Get<GalleryImage, unknown, void, ExperiencePrivateGalleryRetrievePathParams>
    path={`/api/experience/private/gallery/${uid}/`}
    {...props}
  />
);

export type UseExperiencePrivateGalleryRetrieveProps = Omit<
  UseGetProps<
    GalleryImage,
    unknown,
    void,
    ExperiencePrivateGalleryRetrievePathParams
  >,
  "path"
> &
  ExperiencePrivateGalleryRetrievePathParams;

export const useExperiencePrivateGalleryRetrieve = ({
  uid,
  ...props
}: UseExperiencePrivateGalleryRetrieveProps) =>
  useGet<
    GalleryImage,
    unknown,
    void,
    ExperiencePrivateGalleryRetrievePathParams
  >(
    (paramsInPath: ExperiencePrivateGalleryRetrievePathParams) =>
      `/api/experience/private/gallery/${paramsInPath.uid}/`,
    { pathParams: { uid }, ...props }
  );

export type ExperiencePrivateGalleryDestroyProps = Omit<
  MutateProps<void, unknown, void, string, void>,
  "path" | "verb"
>;

export const ExperiencePrivateGalleryDestroy = (
  props: ExperiencePrivateGalleryDestroyProps
) => (
  <Mutate<void, unknown, void, string, void>
    verb="DELETE"
    path={`/api/experience/private/gallery`}
    {...props}
  />
);

export type UseExperiencePrivateGalleryDestroyProps = Omit<
  UseMutateProps<void, unknown, void, string, void>,
  "path" | "verb"
>;

export const useExperiencePrivateGalleryDestroy = (
  props: UseExperiencePrivateGalleryDestroyProps
) =>
  useMutate<void, unknown, void, string, void>(
    "DELETE",
    `/api/experience/private/gallery`,
    { ...props }
  );

export interface ExperiencePrivateLessonsListQueryParams {
  /**
   * Number of results to return per page.
   */
  limit?: number;
  /**
   * The initial index from which to return the results.
   */
  offset?: number;
}

export type ExperiencePrivateLessonsListProps = Omit<
  GetProps<
    PaginatedPrivateLessonList,
    unknown,
    ExperiencePrivateLessonsListQueryParams,
    void
  >,
  "path"
>;

/**
 * A view for creating, deleting, updating, and displaying the current users private lessons
 */
export const ExperiencePrivateLessonsList = (
  props: ExperiencePrivateLessonsListProps
) => (
  <Get<
    PaginatedPrivateLessonList,
    unknown,
    ExperiencePrivateLessonsListQueryParams,
    void
  >
    path={`/api/experience/private/lessons/`}
    {...props}
  />
);

export type UseExperiencePrivateLessonsListProps = Omit<
  UseGetProps<
    PaginatedPrivateLessonList,
    unknown,
    ExperiencePrivateLessonsListQueryParams,
    void
  >,
  "path"
>;

/**
 * A view for creating, deleting, updating, and displaying the current users private lessons
 */
export const useExperiencePrivateLessonsList = (
  props: UseExperiencePrivateLessonsListProps
) =>
  useGet<
    PaginatedPrivateLessonList,
    unknown,
    ExperiencePrivateLessonsListQueryParams,
    void
  >(`/api/experience/private/lessons/`, props);

export type ExperiencePrivateLessonsCreateProps = Omit<
  MutateProps<PrivateLessonCreate, unknown, void, PrivateLessonCreate, void>,
  "path" | "verb"
>;

/**
 * A view for creating, deleting, updating, and displaying the current users private lessons
 */
export const ExperiencePrivateLessonsCreate = (
  props: ExperiencePrivateLessonsCreateProps
) => (
  <Mutate<PrivateLessonCreate, unknown, void, PrivateLessonCreate, void>
    verb="POST"
    path={`/api/experience/private/lessons/`}
    {...props}
  />
);

export type UseExperiencePrivateLessonsCreateProps = Omit<
  UseMutateProps<PrivateLessonCreate, unknown, void, PrivateLessonCreate, void>,
  "path" | "verb"
>;

/**
 * A view for creating, deleting, updating, and displaying the current users private lessons
 */
export const useExperiencePrivateLessonsCreate = (
  props: UseExperiencePrivateLessonsCreateProps
) =>
  useMutate<PrivateLessonCreate, unknown, void, PrivateLessonCreate, void>(
    "POST",
    `/api/experience/private/lessons/`,
    props
  );

export interface ExperiencePrivateLessonsRetrievePathParams {
  uid: string;
}

export type ExperiencePrivateLessonsRetrieveProps = Omit<
  GetProps<
    PrivateLesson,
    unknown,
    void,
    ExperiencePrivateLessonsRetrievePathParams
  >,
  "path"
> &
  ExperiencePrivateLessonsRetrievePathParams;

/**
 * A view for creating, deleting, updating, and displaying the current users private lessons
 */
export const ExperiencePrivateLessonsRetrieve = ({
  uid,
  ...props
}: ExperiencePrivateLessonsRetrieveProps) => (
  <Get<PrivateLesson, unknown, void, ExperiencePrivateLessonsRetrievePathParams>
    path={`/api/experience/private/lessons/${uid}/`}
    {...props}
  />
);

export type UseExperiencePrivateLessonsRetrieveProps = Omit<
  UseGetProps<
    PrivateLesson,
    unknown,
    void,
    ExperiencePrivateLessonsRetrievePathParams
  >,
  "path"
> &
  ExperiencePrivateLessonsRetrievePathParams;

/**
 * A view for creating, deleting, updating, and displaying the current users private lessons
 */
export const useExperiencePrivateLessonsRetrieve = ({
  uid,
  ...props
}: UseExperiencePrivateLessonsRetrieveProps) =>
  useGet<
    PrivateLesson,
    unknown,
    void,
    ExperiencePrivateLessonsRetrievePathParams
  >(
    (paramsInPath: ExperiencePrivateLessonsRetrievePathParams) =>
      `/api/experience/private/lessons/${paramsInPath.uid}/`,
    { pathParams: { uid }, ...props }
  );

export interface ExperiencePrivateLessonsUpdatePathParams {
  uid: string;
}

export type ExperiencePrivateLessonsUpdateProps = Omit<
  MutateProps<
    PrivateLesson,
    unknown,
    void,
    PrivateLesson,
    ExperiencePrivateLessonsUpdatePathParams
  >,
  "path" | "verb"
> &
  ExperiencePrivateLessonsUpdatePathParams;

/**
 * A view for creating, deleting, updating, and displaying the current users private lessons
 */
export const ExperiencePrivateLessonsUpdate = ({
  uid,
  ...props
}: ExperiencePrivateLessonsUpdateProps) => (
  <Mutate<
    PrivateLesson,
    unknown,
    void,
    PrivateLesson,
    ExperiencePrivateLessonsUpdatePathParams
  >
    verb="PUT"
    path={`/api/experience/private/lessons/${uid}/`}
    {...props}
  />
);

export type UseExperiencePrivateLessonsUpdateProps = Omit<
  UseMutateProps<
    PrivateLesson,
    unknown,
    void,
    PrivateLesson,
    ExperiencePrivateLessonsUpdatePathParams
  >,
  "path" | "verb"
> &
  ExperiencePrivateLessonsUpdatePathParams;

/**
 * A view for creating, deleting, updating, and displaying the current users private lessons
 */
export const useExperiencePrivateLessonsUpdate = ({
  uid,
  ...props
}: UseExperiencePrivateLessonsUpdateProps) =>
  useMutate<
    PrivateLesson,
    unknown,
    void,
    PrivateLesson,
    ExperiencePrivateLessonsUpdatePathParams
  >(
    "PUT",
    (paramsInPath: ExperiencePrivateLessonsUpdatePathParams) =>
      `/api/experience/private/lessons/${paramsInPath.uid}/`,
    { pathParams: { uid }, ...props }
  );

export interface ExperiencePrivateLessonsPartialUpdatePathParams {
  uid: string;
}

export type ExperiencePrivateLessonsPartialUpdateProps = Omit<
  MutateProps<
    PrivateLesson,
    unknown,
    void,
    PatchedPrivateLesson,
    ExperiencePrivateLessonsPartialUpdatePathParams
  >,
  "path" | "verb"
> &
  ExperiencePrivateLessonsPartialUpdatePathParams;

/**
 * A view for creating, deleting, updating, and displaying the current users private lessons
 */
export const ExperiencePrivateLessonsPartialUpdate = ({
  uid,
  ...props
}: ExperiencePrivateLessonsPartialUpdateProps) => (
  <Mutate<
    PrivateLesson,
    unknown,
    void,
    PatchedPrivateLesson,
    ExperiencePrivateLessonsPartialUpdatePathParams
  >
    verb="PATCH"
    path={`/api/experience/private/lessons/${uid}/`}
    {...props}
  />
);

export type UseExperiencePrivateLessonsPartialUpdateProps = Omit<
  UseMutateProps<
    PrivateLesson,
    unknown,
    void,
    PatchedPrivateLesson,
    ExperiencePrivateLessonsPartialUpdatePathParams
  >,
  "path" | "verb"
> &
  ExperiencePrivateLessonsPartialUpdatePathParams;

/**
 * A view for creating, deleting, updating, and displaying the current users private lessons
 */
export const useExperiencePrivateLessonsPartialUpdate = ({
  uid,
  ...props
}: UseExperiencePrivateLessonsPartialUpdateProps) =>
  useMutate<
    PrivateLesson,
    unknown,
    void,
    PatchedPrivateLesson,
    ExperiencePrivateLessonsPartialUpdatePathParams
  >(
    "PATCH",
    (paramsInPath: ExperiencePrivateLessonsPartialUpdatePathParams) =>
      `/api/experience/private/lessons/${paramsInPath.uid}/`,
    { pathParams: { uid }, ...props }
  );

export type ExperiencePrivateLessonsDestroyProps = Omit<
  MutateProps<void, unknown, void, string, void>,
  "path" | "verb"
>;

/**
 * A view for creating, deleting, updating, and displaying the current users private lessons
 */
export const ExperiencePrivateLessonsDestroy = (
  props: ExperiencePrivateLessonsDestroyProps
) => (
  <Mutate<void, unknown, void, string, void>
    verb="DELETE"
    path={`/api/experience/private/lessons`}
    {...props}
  />
);

export type UseExperiencePrivateLessonsDestroyProps = Omit<
  UseMutateProps<void, unknown, void, string, void>,
  "path" | "verb"
>;

/**
 * A view for creating, deleting, updating, and displaying the current users private lessons
 */
export const useExperiencePrivateLessonsDestroy = (
  props: UseExperiencePrivateLessonsDestroyProps
) =>
  useMutate<void, unknown, void, string, void>(
    "DELETE",
    `/api/experience/private/lessons`,
    { ...props }
  );

export interface GenreListQueryParams {
  /**
   * Number of results to return per page.
   */
  limit?: number;
  /**
   * The initial index from which to return the results.
   */
  offset?: number;
}

export type GenreListProps = Omit<
  GetProps<PaginatedGenreList, unknown, GenreListQueryParams, void>,
  "path"
>;

/**
 * A simple ViewSet for viewing the list of genres
 */
export const GenreList = (props: GenreListProps) => (
  <Get<PaginatedGenreList, unknown, GenreListQueryParams, void>
    path={`/api/genre/`}
    {...props}
  />
);

export type UseGenreListProps = Omit<
  UseGetProps<PaginatedGenreList, unknown, GenreListQueryParams, void>,
  "path"
>;

/**
 * A simple ViewSet for viewing the list of genres
 */
export const useGenreList = (props: UseGenreListProps) =>
  useGet<PaginatedGenreList, unknown, GenreListQueryParams, void>(
    `/api/genre/`,
    props
  );

export interface GenreRetrievePathParams {
  uid: string;
}

export type GenreRetrieveProps = Omit<
  GetProps<Genre, unknown, void, GenreRetrievePathParams>,
  "path"
> &
  GenreRetrievePathParams;

/**
 * A simple ViewSet for viewing the list of genres
 */
export const GenreRetrieve = ({ uid, ...props }: GenreRetrieveProps) => (
  <Get<Genre, unknown, void, GenreRetrievePathParams>
    path={`/api/genre/${uid}/`}
    {...props}
  />
);

export type UseGenreRetrieveProps = Omit<
  UseGetProps<Genre, unknown, void, GenreRetrievePathParams>,
  "path"
> &
  GenreRetrievePathParams;

/**
 * A simple ViewSet for viewing the list of genres
 */
export const useGenreRetrieve = ({ uid, ...props }: UseGenreRetrieveProps) =>
  useGet<Genre, unknown, void, GenreRetrievePathParams>(
    (paramsInPath: GenreRetrievePathParams) =>
      `/api/genre/${paramsInPath.uid}/`,
    { pathParams: { uid }, ...props }
  );

export interface InstrumentListQueryParams {
  /**
   * Number of results to return per page.
   */
  limit?: number;
  /**
   * The initial index from which to return the results.
   */
  offset?: number;
}

export type InstrumentListProps = Omit<
  GetProps<PaginatedInstrumentList, unknown, InstrumentListQueryParams, void>,
  "path"
>;

/**
 * A simple ViewSet for viewing the list of instruments
 */
export const InstrumentList = (props: InstrumentListProps) => (
  <Get<PaginatedInstrumentList, unknown, InstrumentListQueryParams, void>
    path={`/api/instrument/`}
    {...props}
  />
);

export type UseInstrumentListProps = Omit<
  UseGetProps<
    PaginatedInstrumentList,
    unknown,
    InstrumentListQueryParams,
    void
  >,
  "path"
>;

/**
 * A simple ViewSet for viewing the list of instruments
 */
export const useInstrumentList = (props: UseInstrumentListProps) =>
  useGet<PaginatedInstrumentList, unknown, InstrumentListQueryParams, void>(
    `/api/instrument/`,
    props
  );

export interface InstrumentRetrievePathParams {
  uid: string;
}

export type InstrumentRetrieveProps = Omit<
  GetProps<Instrument, unknown, void, InstrumentRetrievePathParams>,
  "path"
> &
  InstrumentRetrievePathParams;

/**
 * A simple ViewSet for viewing the list of instruments
 */
export const InstrumentRetrieve = ({
  uid,
  ...props
}: InstrumentRetrieveProps) => (
  <Get<Instrument, unknown, void, InstrumentRetrievePathParams>
    path={`/api/instrument/${uid}/`}
    {...props}
  />
);

export type UseInstrumentRetrieveProps = Omit<
  UseGetProps<Instrument, unknown, void, InstrumentRetrievePathParams>,
  "path"
> &
  InstrumentRetrievePathParams;

/**
 * A simple ViewSet for viewing the list of instruments
 */
export const useInstrumentRetrieve = ({
  uid,
  ...props
}: UseInstrumentRetrieveProps) =>
  useGet<Instrument, unknown, void, InstrumentRetrievePathParams>(
    (paramsInPath: InstrumentRetrievePathParams) =>
      `/api/instrument/${paramsInPath.uid}/`,
    { pathParams: { uid }, ...props }
  );

export type InviteEmailCreateProps = Omit<
  MutateProps<void, unknown, void, InviteFriend, void>,
  "path" | "verb"
>;

/**
 * View for sending out an invite mail to another user
 */
export const InviteEmailCreate = (props: InviteEmailCreateProps) => (
  <Mutate<void, unknown, void, InviteFriend, void>
    verb="POST"
    path={`/api/invite/email`}
    {...props}
  />
);

export type UseInviteEmailCreateProps = Omit<
  UseMutateProps<void, unknown, void, InviteFriend, void>,
  "path" | "verb"
>;

/**
 * View for sending out an invite mail to another user
 */
export const useInviteEmailCreate = (props: UseInviteEmailCreateProps) =>
  useMutate<void, unknown, void, InviteFriend, void>(
    "POST",
    `/api/invite/email`,
    props
  );

export interface LessonLevelListQueryParams {
  /**
   * Number of results to return per page.
   */
  limit?: number;
  /**
   * The initial index from which to return the results.
   */
  offset?: number;
}

export type LessonLevelListProps = Omit<
  GetProps<PaginatedLessonTypeList, unknown, LessonLevelListQueryParams, void>,
  "path"
>;

/**
 * A simple ViewSet for viewing the different Lesson Levels
 */
export const LessonLevelList = (props: LessonLevelListProps) => (
  <Get<PaginatedLessonTypeList, unknown, LessonLevelListQueryParams, void>
    path={`/api/lesson-level/`}
    {...props}
  />
);

export type UseLessonLevelListProps = Omit<
  UseGetProps<
    PaginatedLessonTypeList,
    unknown,
    LessonLevelListQueryParams,
    void
  >,
  "path"
>;

/**
 * A simple ViewSet for viewing the different Lesson Levels
 */
export const useLessonLevelList = (props: UseLessonLevelListProps) =>
  useGet<PaginatedLessonTypeList, unknown, LessonLevelListQueryParams, void>(
    `/api/lesson-level/`,
    props
  );

export interface LessonLevelRetrievePathParams {
  uid: string;
}

export type LessonLevelRetrieveProps = Omit<
  GetProps<LessonType, unknown, void, LessonLevelRetrievePathParams>,
  "path"
> &
  LessonLevelRetrievePathParams;

/**
 * A simple ViewSet for viewing the different Lesson Levels
 */
export const LessonLevelRetrieve = ({
  uid,
  ...props
}: LessonLevelRetrieveProps) => (
  <Get<LessonType, unknown, void, LessonLevelRetrievePathParams>
    path={`/api/lesson-level/${uid}/`}
    {...props}
  />
);

export type UseLessonLevelRetrieveProps = Omit<
  UseGetProps<LessonType, unknown, void, LessonLevelRetrievePathParams>,
  "path"
> &
  LessonLevelRetrievePathParams;

/**
 * A simple ViewSet for viewing the different Lesson Levels
 */
export const useLessonLevelRetrieve = ({
  uid,
  ...props
}: UseLessonLevelRetrieveProps) =>
  useGet<LessonType, unknown, void, LessonLevelRetrievePathParams>(
    (paramsInPath: LessonLevelRetrievePathParams) =>
      `/api/lesson-level/${paramsInPath.uid}/`,
    { pathParams: { uid }, ...props }
  );

export interface LessonTypeListQueryParams {
  /**
   * Number of results to return per page.
   */
  limit?: number;
  /**
   * The initial index from which to return the results.
   */
  offset?: number;
}

export type LessonTypeListProps = Omit<
  GetProps<PaginatedLessonTypeList, unknown, LessonTypeListQueryParams, void>,
  "path"
>;

/**
 * A simple ViewSet for viewing the different Lesson Types
 */
export const LessonTypeList = (props: LessonTypeListProps) => (
  <Get<PaginatedLessonTypeList, unknown, LessonTypeListQueryParams, void>
    path={`/api/lesson-type/`}
    {...props}
  />
);

export type UseLessonTypeListProps = Omit<
  UseGetProps<
    PaginatedLessonTypeList,
    unknown,
    LessonTypeListQueryParams,
    void
  >,
  "path"
>;

/**
 * A simple ViewSet for viewing the different Lesson Types
 */
export const useLessonTypeList = (props: UseLessonTypeListProps) =>
  useGet<PaginatedLessonTypeList, unknown, LessonTypeListQueryParams, void>(
    `/api/lesson-type/`,
    props
  );

export interface LessonTypeRetrievePathParams {
  uid: string;
}

export type LessonTypeRetrieveProps = Omit<
  GetProps<LessonType, unknown, void, LessonTypeRetrievePathParams>,
  "path"
> &
  LessonTypeRetrievePathParams;

/**
 * A simple ViewSet for viewing the different Lesson Types
 */
export const LessonTypeRetrieve = ({
  uid,
  ...props
}: LessonTypeRetrieveProps) => (
  <Get<LessonType, unknown, void, LessonTypeRetrievePathParams>
    path={`/api/lesson-type/${uid}/`}
    {...props}
  />
);

export type UseLessonTypeRetrieveProps = Omit<
  UseGetProps<LessonType, unknown, void, LessonTypeRetrievePathParams>,
  "path"
> &
  LessonTypeRetrievePathParams;

/**
 * A simple ViewSet for viewing the different Lesson Types
 */
export const useLessonTypeRetrieve = ({
  uid,
  ...props
}: UseLessonTypeRetrieveProps) =>
  useGet<LessonType, unknown, void, LessonTypeRetrievePathParams>(
    (paramsInPath: LessonTypeRetrievePathParams) =>
      `/api/lesson-type/${paramsInPath.uid}/`,
    { pathParams: { uid }, ...props }
  );

export interface LocationsPrivateListQueryParams {
  /**
   * Number of results to return per page.
   */
  limit?: number;
  /**
   * The initial index from which to return the results.
   */
  offset?: number;
}

export type LocationsPrivateListProps = Omit<
  GetProps<
    PaginatedPrivateLocationList,
    unknown,
    LocationsPrivateListQueryParams,
    void
  >,
  "path"
>;

/**
 * Lists all locations owned by the current user
 */
export const LocationsPrivateList = (props: LocationsPrivateListProps) => (
  <Get<
    PaginatedPrivateLocationList,
    unknown,
    LocationsPrivateListQueryParams,
    void
  >
    path={`/api/locations/private/`}
    {...props}
  />
);

export type UseLocationsPrivateListProps = Omit<
  UseGetProps<
    PaginatedPrivateLocationList,
    unknown,
    LocationsPrivateListQueryParams,
    void
  >,
  "path"
>;

/**
 * Lists all locations owned by the current user
 */
export const useLocationsPrivateList = (props: UseLocationsPrivateListProps) =>
  useGet<
    PaginatedPrivateLocationList,
    unknown,
    LocationsPrivateListQueryParams,
    void
  >(`/api/locations/private/`, props);

export type LocationsPrivateCreateProps = Omit<
  MutateProps<PrivateLocation, unknown, void, PrivateLocation, void>,
  "path" | "verb"
>;

/**
 * Creates a new location
 */
export const LocationsPrivateCreate = (props: LocationsPrivateCreateProps) => (
  <Mutate<PrivateLocation, unknown, void, PrivateLocation, void>
    verb="POST"
    path={`/api/locations/private/`}
    {...props}
  />
);

export type UseLocationsPrivateCreateProps = Omit<
  UseMutateProps<PrivateLocation, unknown, void, PrivateLocation, void>,
  "path" | "verb"
>;

/**
 * Creates a new location
 */
export const useLocationsPrivateCreate = (
  props: UseLocationsPrivateCreateProps
) =>
  useMutate<PrivateLocation, unknown, void, PrivateLocation, void>(
    "POST",
    `/api/locations/private/`,
    props
  );

export interface LocationsPrivateRetrievePathParams {
  uid: string;
}

export type LocationsPrivateRetrieveProps = Omit<
  GetProps<PrivateLocation, unknown, void, LocationsPrivateRetrievePathParams>,
  "path"
> &
  LocationsPrivateRetrievePathParams;

/**
 * Retrieves a certain location owned by the current user
 */
export const LocationsPrivateRetrieve = ({
  uid,
  ...props
}: LocationsPrivateRetrieveProps) => (
  <Get<PrivateLocation, unknown, void, LocationsPrivateRetrievePathParams>
    path={`/api/locations/private/${uid}/`}
    {...props}
  />
);

export type UseLocationsPrivateRetrieveProps = Omit<
  UseGetProps<
    PrivateLocation,
    unknown,
    void,
    LocationsPrivateRetrievePathParams
  >,
  "path"
> &
  LocationsPrivateRetrievePathParams;

/**
 * Retrieves a certain location owned by the current user
 */
export const useLocationsPrivateRetrieve = ({
  uid,
  ...props
}: UseLocationsPrivateRetrieveProps) =>
  useGet<PrivateLocation, unknown, void, LocationsPrivateRetrievePathParams>(
    (paramsInPath: LocationsPrivateRetrievePathParams) =>
      `/api/locations/private/${paramsInPath.uid}/`,
    { pathParams: { uid }, ...props }
  );

export type LocationsPrivateDestroyProps = Omit<
  MutateProps<void, unknown, void, string, void>,
  "path" | "verb"
>;

/**
 * Deletes a certain location from the current user (will currently fail if location is already in use)
 */
export const LocationsPrivateDestroy = (
  props: LocationsPrivateDestroyProps
) => (
  <Mutate<void, unknown, void, string, void>
    verb="DELETE"
    path={`/api/locations/private`}
    {...props}
  />
);

export type UseLocationsPrivateDestroyProps = Omit<
  UseMutateProps<void, unknown, void, string, void>,
  "path" | "verb"
>;

/**
 * Deletes a certain location from the current user (will currently fail if location is already in use)
 */
export const useLocationsPrivateDestroy = (
  props: UseLocationsPrivateDestroyProps
) =>
  useMutate<void, unknown, void, string, void>(
    "DELETE",
    `/api/locations/private`,
    { ...props }
  );

export type LocationsPublicRetrieveProps = Omit<
  GetProps<PublicLocation, unknown, void, void>,
  "path"
>;

/**
 * A View for retrieving publicly available Locations by UID
 */
export const LocationsPublicRetrieve = (
  props: LocationsPublicRetrieveProps
) => (
  <Get<PublicLocation, unknown, void, void>
    path={`/api/locations/public`}
    {...props}
  />
);

export type UseLocationsPublicRetrieveProps = Omit<
  UseGetProps<PublicLocation, unknown, void, void>,
  "path"
>;

/**
 * A View for retrieving publicly available Locations by UID
 */
export const useLocationsPublicRetrieve = (
  props: UseLocationsPublicRetrieveProps
) =>
  useGet<PublicLocation, unknown, void, void>(`/api/locations/public`, props);

export type PasswordResetCreateProps = Omit<
  MutateProps<Email, unknown, void, Email, void>,
  "path" | "verb"
>;

/**
 * An Api View which provides a method to request a password reset token based on an e-mail address
 *
 * Sends a signal reset_password_token_created when a reset token was created
 */
export const PasswordResetCreate = (props: PasswordResetCreateProps) => (
  <Mutate<Email, unknown, void, Email, void>
    verb="POST"
    path={`/api/password-reset/`}
    {...props}
  />
);

export type UsePasswordResetCreateProps = Omit<
  UseMutateProps<Email, unknown, void, Email, void>,
  "path" | "verb"
>;

/**
 * An Api View which provides a method to request a password reset token based on an e-mail address
 *
 * Sends a signal reset_password_token_created when a reset token was created
 */
export const usePasswordResetCreate = (props: UsePasswordResetCreateProps) =>
  useMutate<Email, unknown, void, Email, void>(
    "POST",
    `/api/password-reset/`,
    props
  );

export type PasswordResetConfirmCreateProps = Omit<
  MutateProps<PasswordToken, unknown, void, PasswordToken, void>,
  "path" | "verb"
>;

/**
 * An Api View which provides a method to reset a password based on a unique token
 */
export const PasswordResetConfirmCreate = (
  props: PasswordResetConfirmCreateProps
) => (
  <Mutate<PasswordToken, unknown, void, PasswordToken, void>
    verb="POST"
    path={`/api/password-reset/confirm/`}
    {...props}
  />
);

export type UsePasswordResetConfirmCreateProps = Omit<
  UseMutateProps<PasswordToken, unknown, void, PasswordToken, void>,
  "path" | "verb"
>;

/**
 * An Api View which provides a method to reset a password based on a unique token
 */
export const usePasswordResetConfirmCreate = (
  props: UsePasswordResetConfirmCreateProps
) =>
  useMutate<PasswordToken, unknown, void, PasswordToken, void>(
    "POST",
    `/api/password-reset/confirm/`,
    props
  );

export type PasswordResetValidateTokenCreateProps = Omit<
  MutateProps<ResetToken, unknown, void, ResetToken, void>,
  "path" | "verb"
>;

/**
 * An Api View which provides a method to verify that a token is valid
 */
export const PasswordResetValidateTokenCreate = (
  props: PasswordResetValidateTokenCreateProps
) => (
  <Mutate<ResetToken, unknown, void, ResetToken, void>
    verb="POST"
    path={`/api/password-reset/validate_token/`}
    {...props}
  />
);

export type UsePasswordResetValidateTokenCreateProps = Omit<
  UseMutateProps<ResetToken, unknown, void, ResetToken, void>,
  "path" | "verb"
>;

/**
 * An Api View which provides a method to verify that a token is valid
 */
export const usePasswordResetValidateTokenCreate = (
  props: UsePasswordResetValidateTokenCreateProps
) =>
  useMutate<ResetToken, unknown, void, ResetToken, void>(
    "POST",
    `/api/password-reset/validate_token/`,
    props
  );

export interface PaymentMethodListQueryParams {
  /**
   * Number of results to return per page.
   */
  limit?: number;
  /**
   * The initial index from which to return the results.
   */
  offset?: number;
}

export type PaymentMethodListProps = Omit<
  GetProps<
    PaginatedPaymentMethodList,
    unknown,
    PaymentMethodListQueryParams,
    void
  >,
  "path"
>;

export const PaymentMethodList = (props: PaymentMethodListProps) => (
  <Get<PaginatedPaymentMethodList, unknown, PaymentMethodListQueryParams, void>
    path={`/api/payment-method/`}
    {...props}
  />
);

export type UsePaymentMethodListProps = Omit<
  UseGetProps<
    PaginatedPaymentMethodList,
    unknown,
    PaymentMethodListQueryParams,
    void
  >,
  "path"
>;

export const usePaymentMethodList = (props: UsePaymentMethodListProps) =>
  useGet<
    PaginatedPaymentMethodList,
    unknown,
    PaymentMethodListQueryParams,
    void
  >(`/api/payment-method/`, props);

export interface PaymentMethodRetrievePathParams {
  id: string;
}

export type PaymentMethodRetrieveProps = Omit<
  GetProps<PaymentMethod, unknown, void, PaymentMethodRetrievePathParams>,
  "path"
> &
  PaymentMethodRetrievePathParams;

export const PaymentMethodRetrieve = ({
  id,
  ...props
}: PaymentMethodRetrieveProps) => (
  <Get<PaymentMethod, unknown, void, PaymentMethodRetrievePathParams>
    path={`/api/payment-method/${id}/`}
    {...props}
  />
);

export type UsePaymentMethodRetrieveProps = Omit<
  UseGetProps<PaymentMethod, unknown, void, PaymentMethodRetrievePathParams>,
  "path"
> &
  PaymentMethodRetrievePathParams;

export const usePaymentMethodRetrieve = ({
  id,
  ...props
}: UsePaymentMethodRetrieveProps) =>
  useGet<PaymentMethod, unknown, void, PaymentMethodRetrievePathParams>(
    (paramsInPath: PaymentMethodRetrievePathParams) =>
      `/api/payment-method/${paramsInPath.id}/`,
    { pathParams: { id }, ...props }
  );

export type PaymentMethodCreateIntentCreateProps = Omit<
  MutateProps<CreateSetupIntent, unknown, void, PaymentMethod, void>,
  "path" | "verb"
>;

export const PaymentMethodCreateIntentCreate = (
  props: PaymentMethodCreateIntentCreateProps
) => (
  <Mutate<CreateSetupIntent, unknown, void, PaymentMethod, void>
    verb="POST"
    path={`/api/payment-method/create_intent/`}
    {...props}
  />
);

export type UsePaymentMethodCreateIntentCreateProps = Omit<
  UseMutateProps<CreateSetupIntent, unknown, void, PaymentMethod, void>,
  "path" | "verb"
>;

export const usePaymentMethodCreateIntentCreate = (
  props: UsePaymentMethodCreateIntentCreateProps
) =>
  useMutate<CreateSetupIntent, unknown, void, PaymentMethod, void>(
    "POST",
    `/api/payment-method/create_intent/`,
    props
  );

export interface PendingApplicationsListQueryParams {
  /**
   * Number of results to return per page.
   */
  limit?: number;
  /**
   * The initial index from which to return the results.
   */
  offset?: number;
}

export type PendingApplicationsListProps = Omit<
  GetProps<
    PaginatedTeacherApplicationList,
    unknown,
    PendingApplicationsListQueryParams,
    void
  >,
  "path"
>;

/**
 * A Viewset for viewing and accepting Pending Teacher Applications
 */
export const PendingApplicationsList = (
  props: PendingApplicationsListProps
) => (
  <Get<
    PaginatedTeacherApplicationList,
    unknown,
    PendingApplicationsListQueryParams,
    void
  >
    path={`/api/pending-applications/`}
    {...props}
  />
);

export type UsePendingApplicationsListProps = Omit<
  UseGetProps<
    PaginatedTeacherApplicationList,
    unknown,
    PendingApplicationsListQueryParams,
    void
  >,
  "path"
>;

/**
 * A Viewset for viewing and accepting Pending Teacher Applications
 */
export const usePendingApplicationsList = (
  props: UsePendingApplicationsListProps
) =>
  useGet<
    PaginatedTeacherApplicationList,
    unknown,
    PendingApplicationsListQueryParams,
    void
  >(`/api/pending-applications/`, props);

export interface PendingApplicationsRetrievePathParams {
  uid: string;
}

export type PendingApplicationsRetrieveProps = Omit<
  GetProps<
    TeacherApplication,
    unknown,
    void,
    PendingApplicationsRetrievePathParams
  >,
  "path"
> &
  PendingApplicationsRetrievePathParams;

/**
 * A Viewset for viewing and accepting Pending Teacher Applications
 */
export const PendingApplicationsRetrieve = ({
  uid,
  ...props
}: PendingApplicationsRetrieveProps) => (
  <Get<TeacherApplication, unknown, void, PendingApplicationsRetrievePathParams>
    path={`/api/pending-applications/${uid}/`}
    {...props}
  />
);

export type UsePendingApplicationsRetrieveProps = Omit<
  UseGetProps<
    TeacherApplication,
    unknown,
    void,
    PendingApplicationsRetrievePathParams
  >,
  "path"
> &
  PendingApplicationsRetrievePathParams;

/**
 * A Viewset for viewing and accepting Pending Teacher Applications
 */
export const usePendingApplicationsRetrieve = ({
  uid,
  ...props
}: UsePendingApplicationsRetrieveProps) =>
  useGet<
    TeacherApplication,
    unknown,
    void,
    PendingApplicationsRetrievePathParams
  >(
    (paramsInPath: PendingApplicationsRetrievePathParams) =>
      `/api/pending-applications/${paramsInPath.uid}/`,
    { pathParams: { uid }, ...props }
  );

export interface PendingApplicationsAcceptCreatePathParams {
  uid: string;
}

export type PendingApplicationsAcceptCreateProps = Omit<
  MutateProps<
    void,
    unknown,
    void,
    TeacherApplication,
    PendingApplicationsAcceptCreatePathParams
  >,
  "path" | "verb"
> &
  PendingApplicationsAcceptCreatePathParams;

/**
 * Accepts this teacher application
 */
export const PendingApplicationsAcceptCreate = ({
  uid,
  ...props
}: PendingApplicationsAcceptCreateProps) => (
  <Mutate<
    void,
    unknown,
    void,
    TeacherApplication,
    PendingApplicationsAcceptCreatePathParams
  >
    verb="POST"
    path={`/api/pending-applications/${uid}/accept/`}
    {...props}
  />
);

export type UsePendingApplicationsAcceptCreateProps = Omit<
  UseMutateProps<
    void,
    unknown,
    void,
    TeacherApplication,
    PendingApplicationsAcceptCreatePathParams
  >,
  "path" | "verb"
> &
  PendingApplicationsAcceptCreatePathParams;

/**
 * Accepts this teacher application
 */
export const usePendingApplicationsAcceptCreate = ({
  uid,
  ...props
}: UsePendingApplicationsAcceptCreateProps) =>
  useMutate<
    void,
    unknown,
    void,
    TeacherApplication,
    PendingApplicationsAcceptCreatePathParams
  >(
    "POST",
    (paramsInPath: PendingApplicationsAcceptCreatePathParams) =>
      `/api/pending-applications/${paramsInPath.uid}/accept/`,
    { pathParams: { uid }, ...props }
  );

export interface PendingApplicationsDeclineCreatePathParams {
  uid: string;
}

export type PendingApplicationsDeclineCreateProps = Omit<
  MutateProps<
    void,
    unknown,
    void,
    TeacherApplication,
    PendingApplicationsDeclineCreatePathParams
  >,
  "path" | "verb"
> &
  PendingApplicationsDeclineCreatePathParams;

/**
 * Rejects this teacher application
 */
export const PendingApplicationsDeclineCreate = ({
  uid,
  ...props
}: PendingApplicationsDeclineCreateProps) => (
  <Mutate<
    void,
    unknown,
    void,
    TeacherApplication,
    PendingApplicationsDeclineCreatePathParams
  >
    verb="POST"
    path={`/api/pending-applications/${uid}/decline/`}
    {...props}
  />
);

export type UsePendingApplicationsDeclineCreateProps = Omit<
  UseMutateProps<
    void,
    unknown,
    void,
    TeacherApplication,
    PendingApplicationsDeclineCreatePathParams
  >,
  "path" | "verb"
> &
  PendingApplicationsDeclineCreatePathParams;

/**
 * Rejects this teacher application
 */
export const usePendingApplicationsDeclineCreate = ({
  uid,
  ...props
}: UsePendingApplicationsDeclineCreateProps) =>
  useMutate<
    void,
    unknown,
    void,
    TeacherApplication,
    PendingApplicationsDeclineCreatePathParams
  >(
    "POST",
    (paramsInPath: PendingApplicationsDeclineCreatePathParams) =>
      `/api/pending-applications/${paramsInPath.uid}/decline/`,
    { pathParams: { uid }, ...props }
  );

export type RequestVerifyEmailCreateProps = Omit<
  MutateProps<void, unknown, void, void, void>,
  "path" | "verb"
>;

/**
 * View for requesting current email address to be verified
 */
export const RequestVerifyEmailCreate = (
  props: RequestVerifyEmailCreateProps
) => (
  <Mutate<void, unknown, void, void, void>
    verb="POST"
    path={`/api/request-verify/email`}
    {...props}
  />
);

export type UseRequestVerifyEmailCreateProps = Omit<
  UseMutateProps<void, unknown, void, void, void>,
  "path" | "verb"
>;

/**
 * View for requesting current email address to be verified
 */
export const useRequestVerifyEmailCreate = (
  props: UseRequestVerifyEmailCreateProps
) =>
  useMutate<void, unknown, void, void, void>(
    "POST",
    `/api/request-verify/email`,
    props
  );

export interface ReviewListQueryParams {
  /**
   * Number of results to return per page.
   */
  limit?: number;
  /**
   * The initial index from which to return the results.
   */
  offset?: number;
}

export type ReviewListProps = Omit<
  GetProps<
    PaginatedExperienceCustomerReviewList,
    unknown,
    ReviewListQueryParams,
    void
  >,
  "path"
>;

/**
 * A viewset for viewing, updating, adding and deleting Experience Reviews by Customers
 */
export const ReviewList = (props: ReviewListProps) => (
  <Get<
    PaginatedExperienceCustomerReviewList,
    unknown,
    ReviewListQueryParams,
    void
  >
    path={`/api/review/`}
    {...props}
  />
);

export type UseReviewListProps = Omit<
  UseGetProps<
    PaginatedExperienceCustomerReviewList,
    unknown,
    ReviewListQueryParams,
    void
  >,
  "path"
>;

/**
 * A viewset for viewing, updating, adding and deleting Experience Reviews by Customers
 */
export const useReviewList = (props: UseReviewListProps) =>
  useGet<
    PaginatedExperienceCustomerReviewList,
    unknown,
    ReviewListQueryParams,
    void
  >(`/api/review/`, props);

export type ReviewCreateProps = Omit<
  MutateProps<
    ExperienceCustomerReview,
    unknown,
    void,
    ExperienceCustomerReview,
    void
  >,
  "path" | "verb"
>;

/**
 * A viewset for viewing, updating, adding and deleting Experience Reviews by Customers
 */
export const ReviewCreate = (props: ReviewCreateProps) => (
  <Mutate<
    ExperienceCustomerReview,
    unknown,
    void,
    ExperienceCustomerReview,
    void
  >
    verb="POST"
    path={`/api/review/`}
    {...props}
  />
);

export type UseReviewCreateProps = Omit<
  UseMutateProps<
    ExperienceCustomerReview,
    unknown,
    void,
    ExperienceCustomerReview,
    void
  >,
  "path" | "verb"
>;

/**
 * A viewset for viewing, updating, adding and deleting Experience Reviews by Customers
 */
export const useReviewCreate = (props: UseReviewCreateProps) =>
  useMutate<
    ExperienceCustomerReview,
    unknown,
    void,
    ExperienceCustomerReview,
    void
  >("POST", `/api/review/`, props);

export interface ReviewRetrievePathParams {
  uid: string;
}

export type ReviewRetrieveProps = Omit<
  GetProps<ExperienceCustomerReview, unknown, void, ReviewRetrievePathParams>,
  "path"
> &
  ReviewRetrievePathParams;

/**
 * A viewset for viewing, updating, adding and deleting Experience Reviews by Customers
 */
export const ReviewRetrieve = ({ uid, ...props }: ReviewRetrieveProps) => (
  <Get<ExperienceCustomerReview, unknown, void, ReviewRetrievePathParams>
    path={`/api/review/${uid}/`}
    {...props}
  />
);

export type UseReviewRetrieveProps = Omit<
  UseGetProps<
    ExperienceCustomerReview,
    unknown,
    void,
    ReviewRetrievePathParams
  >,
  "path"
> &
  ReviewRetrievePathParams;

/**
 * A viewset for viewing, updating, adding and deleting Experience Reviews by Customers
 */
export const useReviewRetrieve = ({ uid, ...props }: UseReviewRetrieveProps) =>
  useGet<ExperienceCustomerReview, unknown, void, ReviewRetrievePathParams>(
    (paramsInPath: ReviewRetrievePathParams) =>
      `/api/review/${paramsInPath.uid}/`,
    { pathParams: { uid }, ...props }
  );

export interface ReviewUpdatePathParams {
  uid: string;
}

export type ReviewUpdateProps = Omit<
  MutateProps<
    ExperienceCustomerReview,
    unknown,
    void,
    ExperienceCustomerReview,
    ReviewUpdatePathParams
  >,
  "path" | "verb"
> &
  ReviewUpdatePathParams;

/**
 * A viewset for viewing, updating, adding and deleting Experience Reviews by Customers
 */
export const ReviewUpdate = ({ uid, ...props }: ReviewUpdateProps) => (
  <Mutate<
    ExperienceCustomerReview,
    unknown,
    void,
    ExperienceCustomerReview,
    ReviewUpdatePathParams
  >
    verb="PUT"
    path={`/api/review/${uid}/`}
    {...props}
  />
);

export type UseReviewUpdateProps = Omit<
  UseMutateProps<
    ExperienceCustomerReview,
    unknown,
    void,
    ExperienceCustomerReview,
    ReviewUpdatePathParams
  >,
  "path" | "verb"
> &
  ReviewUpdatePathParams;

/**
 * A viewset for viewing, updating, adding and deleting Experience Reviews by Customers
 */
export const useReviewUpdate = ({ uid, ...props }: UseReviewUpdateProps) =>
  useMutate<
    ExperienceCustomerReview,
    unknown,
    void,
    ExperienceCustomerReview,
    ReviewUpdatePathParams
  >(
    "PUT",
    (paramsInPath: ReviewUpdatePathParams) =>
      `/api/review/${paramsInPath.uid}/`,
    { pathParams: { uid }, ...props }
  );

export interface ReviewPartialUpdatePathParams {
  uid: string;
}

export type ReviewPartialUpdateProps = Omit<
  MutateProps<
    ExperienceCustomerReview,
    unknown,
    void,
    PatchedExperienceCustomerReview,
    ReviewPartialUpdatePathParams
  >,
  "path" | "verb"
> &
  ReviewPartialUpdatePathParams;

/**
 * A viewset for viewing, updating, adding and deleting Experience Reviews by Customers
 */
export const ReviewPartialUpdate = ({
  uid,
  ...props
}: ReviewPartialUpdateProps) => (
  <Mutate<
    ExperienceCustomerReview,
    unknown,
    void,
    PatchedExperienceCustomerReview,
    ReviewPartialUpdatePathParams
  >
    verb="PATCH"
    path={`/api/review/${uid}/`}
    {...props}
  />
);

export type UseReviewPartialUpdateProps = Omit<
  UseMutateProps<
    ExperienceCustomerReview,
    unknown,
    void,
    PatchedExperienceCustomerReview,
    ReviewPartialUpdatePathParams
  >,
  "path" | "verb"
> &
  ReviewPartialUpdatePathParams;

/**
 * A viewset for viewing, updating, adding and deleting Experience Reviews by Customers
 */
export const useReviewPartialUpdate = ({
  uid,
  ...props
}: UseReviewPartialUpdateProps) =>
  useMutate<
    ExperienceCustomerReview,
    unknown,
    void,
    PatchedExperienceCustomerReview,
    ReviewPartialUpdatePathParams
  >(
    "PATCH",
    (paramsInPath: ReviewPartialUpdatePathParams) =>
      `/api/review/${paramsInPath.uid}/`,
    { pathParams: { uid }, ...props }
  );

export type ReviewDestroyProps = Omit<
  MutateProps<void, unknown, void, string, void>,
  "path" | "verb"
>;

/**
 * A viewset for viewing, updating, adding and deleting Experience Reviews by Customers
 */
export const ReviewDestroy = (props: ReviewDestroyProps) => (
  <Mutate<void, unknown, void, string, void>
    verb="DELETE"
    path={`/api/review`}
    {...props}
  />
);

export type UseReviewDestroyProps = Omit<
  UseMutateProps<void, unknown, void, string, void>,
  "path" | "verb"
>;

/**
 * A viewset for viewing, updating, adding and deleting Experience Reviews by Customers
 */
export const useReviewDestroy = (props: UseReviewDestroyProps) =>
  useMutate<void, unknown, void, string, void>("DELETE", `/api/review`, {
    ...props,
  });

export type SendVerificationEmailCreateProps = Omit<
  MutateProps<SendVerificationEmailResponse, unknown, void, void, void>,
  "path" | "verb"
>;

export const SendVerificationEmailCreate = (
  props: SendVerificationEmailCreateProps
) => (
  <Mutate<SendVerificationEmailResponse, unknown, void, void, void>
    verb="POST"
    path={`/api/send-verification-email`}
    {...props}
  />
);

export type UseSendVerificationEmailCreateProps = Omit<
  UseMutateProps<SendVerificationEmailResponse, unknown, void, void, void>,
  "path" | "verb"
>;

export const useSendVerificationEmailCreate = (
  props: UseSendVerificationEmailCreateProps
) =>
  useMutate<SendVerificationEmailResponse, unknown, void, void, void>(
    "POST",
    `/api/send-verification-email`,
    props
  );

export type SocialAuthAppleCreateProps = Omit<
  MutateProps<void, unknown, void, AppleSocialAuth, void>,
  "path" | "verb"
>;

/**
 * POST with "user"
 *
 * Send a user object returned from apple to get user information
 */
export const SocialAuthAppleCreate = (props: SocialAuthAppleCreateProps) => (
  <Mutate<void, unknown, void, AppleSocialAuth, void>
    verb="POST"
    path={`/api/social-auth/apple/`}
    {...props}
  />
);

export type UseSocialAuthAppleCreateProps = Omit<
  UseMutateProps<void, unknown, void, AppleSocialAuth, void>,
  "path" | "verb"
>;

/**
 * POST with "user"
 *
 * Send a user object returned from apple to get user information
 */
export const useSocialAuthAppleCreate = (
  props: UseSocialAuthAppleCreateProps
) =>
  useMutate<void, unknown, void, AppleSocialAuth, void>(
    "POST",
    `/api/social-auth/apple/`,
    props
  );

export type SocialAuthFacebookCreateProps = Omit<
  MutateProps<FacebookSocialAuth, unknown, void, FacebookSocialAuth, void>,
  "path" | "verb"
>;

/**
 * POST with "auth_token"
 *
 * Send an access token as from facebook to get user information
 */
export const SocialAuthFacebookCreate = (
  props: SocialAuthFacebookCreateProps
) => (
  <Mutate<FacebookSocialAuth, unknown, void, FacebookSocialAuth, void>
    verb="POST"
    path={`/api/social-auth/facebook/`}
    {...props}
  />
);

export type UseSocialAuthFacebookCreateProps = Omit<
  UseMutateProps<FacebookSocialAuth, unknown, void, FacebookSocialAuth, void>,
  "path" | "verb"
>;

/**
 * POST with "auth_token"
 *
 * Send an access token as from facebook to get user information
 */
export const useSocialAuthFacebookCreate = (
  props: UseSocialAuthFacebookCreateProps
) =>
  useMutate<FacebookSocialAuth, unknown, void, FacebookSocialAuth, void>(
    "POST",
    `/api/social-auth/facebook/`,
    props
  );

export type SocialAuthGoogleCreateProps = Omit<
  MutateProps<GoogleSocialAuth, unknown, void, GoogleSocialAuth, void>,
  "path" | "verb"
>;

/**
 * POST with "auth_token"
 *
 * Send an idtoken as from google to get user information
 */
export const SocialAuthGoogleCreate = (props: SocialAuthGoogleCreateProps) => (
  <Mutate<GoogleSocialAuth, unknown, void, GoogleSocialAuth, void>
    verb="POST"
    path={`/api/social-auth/google/`}
    {...props}
  />
);

export type UseSocialAuthGoogleCreateProps = Omit<
  UseMutateProps<GoogleSocialAuth, unknown, void, GoogleSocialAuth, void>,
  "path" | "verb"
>;

/**
 * POST with "auth_token"
 *
 * Send an idtoken as from google to get user information
 */
export const useSocialAuthGoogleCreate = (
  props: UseSocialAuthGoogleCreateProps
) =>
  useMutate<GoogleSocialAuth, unknown, void, GoogleSocialAuth, void>(
    "POST",
    `/api/social-auth/google/`,
    props
  );

export type SocialAuthSpotifyCreateProps = Omit<
  MutateProps<SpotifyAuth, unknown, void, SpotifyAuth, void>,
  "path" | "verb"
>;

/**
 * POST with "auth_token"
 *
 * Send an idtoken as from spotify to get user information
 */
export const SocialAuthSpotifyCreate = (
  props: SocialAuthSpotifyCreateProps
) => (
  <Mutate<SpotifyAuth, unknown, void, SpotifyAuth, void>
    verb="POST"
    path={`/api/social-auth/spotify/`}
    {...props}
  />
);

export type UseSocialAuthSpotifyCreateProps = Omit<
  UseMutateProps<SpotifyAuth, unknown, void, SpotifyAuth, void>,
  "path" | "verb"
>;

/**
 * POST with "auth_token"
 *
 * Send an idtoken as from spotify to get user information
 */
export const useSocialAuthSpotifyCreate = (
  props: UseSocialAuthSpotifyCreateProps
) =>
  useMutate<SpotifyAuth, unknown, void, SpotifyAuth, void>(
    "POST",
    `/api/social-auth/spotify/`,
    props
  );

export type StripeConnectRetrieveProps = Omit<
  GetProps<StripeAccountDashboard, unknown, void, void>,
  "path"
>;

/**
 * Returns the url to the Stripe dashboard if a connected account exists
 */
export const StripeConnectRetrieve = (props: StripeConnectRetrieveProps) => (
  <Get<StripeAccountDashboard, unknown, void, void>
    path={`/api/stripe/connect/`}
    {...props}
  />
);

export type UseStripeConnectRetrieveProps = Omit<
  UseGetProps<StripeAccountDashboard, unknown, void, void>,
  "path"
>;

/**
 * Returns the url to the Stripe dashboard if a connected account exists
 */
export const useStripeConnectRetrieve = (
  props: UseStripeConnectRetrieveProps
) =>
  useGet<StripeAccountDashboard, unknown, void, void>(
    `/api/stripe/connect/`,
    props
  );

export type StripeConnectPayoutListProps = Omit<
  GetProps<StripeExternalAccount[], unknown, void, void>,
  "path"
>;

/**
 * Returns a list of external accounts
 */
export const StripeConnectPayoutList = (
  props: StripeConnectPayoutListProps
) => (
  <Get<StripeExternalAccount[], unknown, void, void>
    path={`/api/stripe/connect/payout/`}
    {...props}
  />
);

export type UseStripeConnectPayoutListProps = Omit<
  UseGetProps<StripeExternalAccount[], unknown, void, void>,
  "path"
>;

/**
 * Returns a list of external accounts
 */
export const useStripeConnectPayoutList = (
  props: UseStripeConnectPayoutListProps
) =>
  useGet<StripeExternalAccount[], unknown, void, void>(
    `/api/stripe/connect/payout/`,
    props
  );

export type StripeConnectStartCreateProps = Omit<
  MutateProps<AccountLinks, unknown, void, AccountLinks, void>,
  "path" | "verb"
>;

/**
 * Return a link to stripe on-boarding process
 */
export const StripeConnectStartCreate = (
  props: StripeConnectStartCreateProps
) => (
  <Mutate<AccountLinks, unknown, void, AccountLinks, void>
    verb="POST"
    path={`/api/stripe/connect/start/`}
    {...props}
  />
);

export type UseStripeConnectStartCreateProps = Omit<
  UseMutateProps<AccountLinks, unknown, void, AccountLinks, void>,
  "path" | "verb"
>;

/**
 * Return a link to stripe on-boarding process
 */
export const useStripeConnectStartCreate = (
  props: UseStripeConnectStartCreateProps
) =>
  useMutate<AccountLinks, unknown, void, AccountLinks, void>(
    "POST",
    `/api/stripe/connect/start/`,
    props
  );

export type TeacherRetrieveProps = Omit<
  GetProps<Teacher, unknown, void, void>,
  "path"
>;

/**
 * A simple ViewSet for viewing and editing the current users teacher related informations
 */
export const TeacherRetrieve = (props: TeacherRetrieveProps) => (
  <Get<Teacher, unknown, void, void> path={`/api/teacher`} {...props} />
);

export type UseTeacherRetrieveProps = Omit<
  UseGetProps<Teacher, unknown, void, void>,
  "path"
>;

/**
 * A simple ViewSet for viewing and editing the current users teacher related informations
 */
export const useTeacherRetrieve = (props: UseTeacherRetrieveProps) =>
  useGet<Teacher, unknown, void, void>(`/api/teacher`, props);

export type TeacherUpdateProps = Omit<
  MutateProps<Teacher, unknown, void, Teacher, void>,
  "path" | "verb"
>;

/**
 * A simple ViewSet for viewing and editing the current users teacher related informations
 */
export const TeacherUpdate = (props: TeacherUpdateProps) => (
  <Mutate<Teacher, unknown, void, Teacher, void>
    verb="PUT"
    path={`/api/teacher`}
    {...props}
  />
);

export type UseTeacherUpdateProps = Omit<
  UseMutateProps<Teacher, unknown, void, Teacher, void>,
  "path" | "verb"
>;

/**
 * A simple ViewSet for viewing and editing the current users teacher related informations
 */
export const useTeacherUpdate = (props: UseTeacherUpdateProps) =>
  useMutate<Teacher, unknown, void, Teacher, void>(
    "PUT",
    `/api/teacher`,
    props
  );

export type TeacherPartialUpdateProps = Omit<
  MutateProps<Teacher, unknown, void, PatchedTeacher, void>,
  "path" | "verb"
>;

/**
 * A simple ViewSet for viewing and editing the current users teacher related informations
 */
export const TeacherPartialUpdate = (props: TeacherPartialUpdateProps) => (
  <Mutate<Teacher, unknown, void, PatchedTeacher, void>
    verb="PATCH"
    path={`/api/teacher`}
    {...props}
  />
);

export type UseTeacherPartialUpdateProps = Omit<
  UseMutateProps<Teacher, unknown, void, PatchedTeacher, void>,
  "path" | "verb"
>;

/**
 * A simple ViewSet for viewing and editing the current users teacher related informations
 */
export const useTeacherPartialUpdate = (props: UseTeacherPartialUpdateProps) =>
  useMutate<Teacher, unknown, void, PatchedTeacher, void>(
    "PATCH",
    `/api/teacher`,
    props
  );

export type TimeslotsOwnListProps = Omit<
  GetProps<TimeSlot[], unknown, void, void>,
  "path"
>;

/**
 * A viewset for managing a teachers time slots
 */
export const TimeslotsOwnList = (props: TimeslotsOwnListProps) => (
  <Get<TimeSlot[], unknown, void, void>
    path={`/api/timeslots/own/`}
    {...props}
  />
);

export type UseTimeslotsOwnListProps = Omit<
  UseGetProps<TimeSlot[], unknown, void, void>,
  "path"
>;

/**
 * A viewset for managing a teachers time slots
 */
export const useTimeslotsOwnList = (props: UseTimeslotsOwnListProps) =>
  useGet<TimeSlot[], unknown, void, void>(`/api/timeslots/own/`, props);

export type TimeslotsOwnCreateProps = Omit<
  MutateProps<TimeSlot, unknown, void, TimeSlot, void>,
  "path" | "verb"
>;

/**
 * A viewset for managing a teachers time slots
 */
export const TimeslotsOwnCreate = (props: TimeslotsOwnCreateProps) => (
  <Mutate<TimeSlot, unknown, void, TimeSlot, void>
    verb="POST"
    path={`/api/timeslots/own/`}
    {...props}
  />
);

export type UseTimeslotsOwnCreateProps = Omit<
  UseMutateProps<TimeSlot, unknown, void, TimeSlot, void>,
  "path" | "verb"
>;

/**
 * A viewset for managing a teachers time slots
 */
export const useTimeslotsOwnCreate = (props: UseTimeslotsOwnCreateProps) =>
  useMutate<TimeSlot, unknown, void, TimeSlot, void>(
    "POST",
    `/api/timeslots/own/`,
    props
  );

export interface TimeslotsOwnRetrievePathParams {
  uid: string;
}

export type TimeslotsOwnRetrieveProps = Omit<
  GetProps<TimeSlot, unknown, void, TimeslotsOwnRetrievePathParams>,
  "path"
> &
  TimeslotsOwnRetrievePathParams;

/**
 * A viewset for managing a teachers time slots
 */
export const TimeslotsOwnRetrieve = ({
  uid,
  ...props
}: TimeslotsOwnRetrieveProps) => (
  <Get<TimeSlot, unknown, void, TimeslotsOwnRetrievePathParams>
    path={`/api/timeslots/own/${uid}/`}
    {...props}
  />
);

export type UseTimeslotsOwnRetrieveProps = Omit<
  UseGetProps<TimeSlot, unknown, void, TimeslotsOwnRetrievePathParams>,
  "path"
> &
  TimeslotsOwnRetrievePathParams;

/**
 * A viewset for managing a teachers time slots
 */
export const useTimeslotsOwnRetrieve = ({
  uid,
  ...props
}: UseTimeslotsOwnRetrieveProps) =>
  useGet<TimeSlot, unknown, void, TimeslotsOwnRetrievePathParams>(
    (paramsInPath: TimeslotsOwnRetrievePathParams) =>
      `/api/timeslots/own/${paramsInPath.uid}/`,
    { pathParams: { uid }, ...props }
  );

export type TimeslotsOwnDestroyProps = Omit<
  MutateProps<void, unknown, void, string, void>,
  "path" | "verb"
>;

/**
 * A viewset for managing a teachers time slots
 */
export const TimeslotsOwnDestroy = (props: TimeslotsOwnDestroyProps) => (
  <Mutate<void, unknown, void, string, void>
    verb="DELETE"
    path={`/api/timeslots/own`}
    {...props}
  />
);

export type UseTimeslotsOwnDestroyProps = Omit<
  UseMutateProps<void, unknown, void, string, void>,
  "path" | "verb"
>;

/**
 * A viewset for managing a teachers time slots
 */
export const useTimeslotsOwnDestroy = (props: UseTimeslotsOwnDestroyProps) =>
  useMutate<void, unknown, void, string, void>("DELETE", `/api/timeslots/own`, {
    ...props,
  });

export type TokenCreateCreateProps = Omit<
  MutateProps<TokenPairResponse, AuthError, void, TokenObtainPair, void>,
  "path" | "verb"
>;

/**
 * Takes a set of user credentials and returns an access and refresh JSON web
 * token pair to prove the authentication of those credentials.
 */
export const TokenCreateCreate = (props: TokenCreateCreateProps) => (
  <Mutate<TokenPairResponse, AuthError, void, TokenObtainPair, void>
    verb="POST"
    path={`/api/token/create`}
    {...props}
  />
);

export type UseTokenCreateCreateProps = Omit<
  UseMutateProps<TokenPairResponse, AuthError, void, TokenObtainPair, void>,
  "path" | "verb"
>;

/**
 * Takes a set of user credentials and returns an access and refresh JSON web
 * token pair to prove the authentication of those credentials.
 */
export const useTokenCreateCreate = (props: UseTokenCreateCreateProps) =>
  useMutate<TokenPairResponse, AuthError, void, TokenObtainPair, void>(
    "POST",
    `/api/token/create`,
    props
  );

export type TokenRefreshCreateProps = Omit<
  MutateProps<TokenRefreshResponse, AuthError, void, TokenRefresh, void>,
  "path" | "verb"
>;

/**
 * Takes a refresh type JSON web token and returns an access type JSON web
 * token if the refresh token is valid.
 */
export const TokenRefreshCreate = (props: TokenRefreshCreateProps) => (
  <Mutate<TokenRefreshResponse, AuthError, void, TokenRefresh, void>
    verb="POST"
    path={`/api/token/refresh`}
    {...props}
  />
);

export type UseTokenRefreshCreateProps = Omit<
  UseMutateProps<TokenRefreshResponse, AuthError, void, TokenRefresh, void>,
  "path" | "verb"
>;

/**
 * Takes a refresh type JSON web token and returns an access type JSON web
 * token if the refresh token is valid.
 */
export const useTokenRefreshCreate = (props: UseTokenRefreshCreateProps) =>
  useMutate<TokenRefreshResponse, AuthError, void, TokenRefresh, void>(
    "POST",
    `/api/token/refresh`,
    props
  );

export type TokenVerifyCreateProps = Omit<
  MutateProps<TokenVerifyResponse, AuthError, void, TokenVerify, void>,
  "path" | "verb"
>;

/**
 * Takes a token and indicates if it is valid.  This view provides no
 * information about a token's fitness for a particular use.
 */
export const TokenVerifyCreate = (props: TokenVerifyCreateProps) => (
  <Mutate<TokenVerifyResponse, AuthError, void, TokenVerify, void>
    verb="POST"
    path={`/api/token/verify`}
    {...props}
  />
);

export type UseTokenVerifyCreateProps = Omit<
  UseMutateProps<TokenVerifyResponse, AuthError, void, TokenVerify, void>,
  "path" | "verb"
>;

/**
 * Takes a token and indicates if it is valid.  This view provides no
 * information about a token's fitness for a particular use.
 */
export const useTokenVerifyCreate = (props: UseTokenVerifyCreateProps) =>
  useMutate<TokenVerifyResponse, AuthError, void, TokenVerify, void>(
    "POST",
    `/api/token/verify`,
    props
  );

export interface UserRetrievePathParams {
  /**
   * A UUID string identifying this user.
   */
  id: string;
}

export type UserRetrieveProps = Omit<
  GetProps<PrivateUser, unknown, void, UserRetrievePathParams>,
  "path"
> &
  UserRetrievePathParams;

/**
 * A ViewSet for retrieving or interacting with other users
 */
export const UserRetrieve = ({ id, ...props }: UserRetrieveProps) => (
  <Get<PrivateUser, unknown, void, UserRetrievePathParams>
    path={`/api/user/${id}/`}
    {...props}
  />
);

export type UseUserRetrieveProps = Omit<
  UseGetProps<PrivateUser, unknown, void, UserRetrievePathParams>,
  "path"
> &
  UserRetrievePathParams;

/**
 * A ViewSet for retrieving or interacting with other users
 */
export const useUserRetrieve = ({ id, ...props }: UseUserRetrieveProps) =>
  useGet<PrivateUser, unknown, void, UserRetrievePathParams>(
    (paramsInPath: UserRetrievePathParams) => `/api/user/${paramsInPath.id}/`,
    { pathParams: { id }, ...props }
  );

export type UserMeRetrieveProps = Omit<
  GetProps<PrivateUser, unknown, void, void>,
  "path"
>;

/**
 * Retrieves the current user account
 */
export const UserMeRetrieve = (props: UserMeRetrieveProps) => (
  <Get<PrivateUser, unknown, void, void> path={`/api/user/me`} {...props} />
);

export type UseUserMeRetrieveProps = Omit<
  UseGetProps<PrivateUser, unknown, void, void>,
  "path"
>;

/**
 * Retrieves the current user account
 */
export const useUserMeRetrieve = (props: UseUserMeRetrieveProps) =>
  useGet<PrivateUser, unknown, void, void>(`/api/user/me`, props);

export type UserMeCreateProps = Omit<
  MutateProps<UserCreate, unknown, void, UserCreate, void>,
  "path" | "verb"
>;

/**
 * Creates a new user account
 */
export const UserMeCreate = (props: UserMeCreateProps) => (
  <Mutate<UserCreate, unknown, void, UserCreate, void>
    verb="POST"
    path={`/api/user/me`}
    {...props}
  />
);

export type UseUserMeCreateProps = Omit<
  UseMutateProps<UserCreate, unknown, void, UserCreate, void>,
  "path" | "verb"
>;

/**
 * Creates a new user account
 */
export const useUserMeCreate = (props: UseUserMeCreateProps) =>
  useMutate<UserCreate, unknown, void, UserCreate, void>(
    "POST",
    `/api/user/me`,
    props
  );

export type UserMePartialUpdateProps = Omit<
  MutateProps<PrivateUser, unknown, void, PatchedPrivateUser, void>,
  "path" | "verb"
>;

/**
 * Performs a partial update of the current user account
 */
export const UserMePartialUpdate = (props: UserMePartialUpdateProps) => (
  <Mutate<PrivateUser, unknown, void, PatchedPrivateUser, void>
    verb="PATCH"
    path={`/api/user/me`}
    {...props}
  />
);

export type UseUserMePartialUpdateProps = Omit<
  UseMutateProps<PrivateUser, unknown, void, PatchedPrivateUser, void>,
  "path" | "verb"
>;

/**
 * Performs a partial update of the current user account
 */
export const useUserMePartialUpdate = (props: UseUserMePartialUpdateProps) =>
  useMutate<PrivateUser, unknown, void, PatchedPrivateUser, void>(
    "PATCH",
    `/api/user/me`,
    props
  );

export type UserMeProfileRetrieveProps = Omit<
  GetProps<UserProfile, unknown, void, void>,
  "path"
>;

/**
 * Retrieves the current user profile
 */
export const UserMeProfileRetrieve = (props: UserMeProfileRetrieveProps) => (
  <Get<UserProfile, unknown, void, void>
    path={`/api/user/me/profile`}
    {...props}
  />
);

export type UseUserMeProfileRetrieveProps = Omit<
  UseGetProps<UserProfile, unknown, void, void>,
  "path"
>;

/**
 * Retrieves the current user profile
 */
export const useUserMeProfileRetrieve = (
  props: UseUserMeProfileRetrieveProps
) => useGet<UserProfile, unknown, void, void>(`/api/user/me/profile`, props);

export type UserMeProfileCreateProps = Omit<
  MutateProps<UserProfile, unknown, void, UserProfile, void>,
  "path" | "verb"
>;

/**
 * Creates a new user profile
 */
export const UserMeProfileCreate = (props: UserMeProfileCreateProps) => (
  <Mutate<UserProfile, unknown, void, UserProfile, void>
    verb="POST"
    path={`/api/user/me/profile`}
    {...props}
  />
);

export type UseUserMeProfileCreateProps = Omit<
  UseMutateProps<UserProfile, unknown, void, UserProfile, void>,
  "path" | "verb"
>;

/**
 * Creates a new user profile
 */
export const useUserMeProfileCreate = (props: UseUserMeProfileCreateProps) =>
  useMutate<UserProfile, unknown, void, UserProfile, void>(
    "POST",
    `/api/user/me/profile`,
    props
  );

export type UserMeProfilePartialUpdateProps = Omit<
  MutateProps<UserProfile, unknown, void, PatchedUserProfile, void>,
  "path" | "verb"
>;

/**
 * Performs a partial update of the current user profile
 */
export const UserMeProfilePartialUpdate = (
  props: UserMeProfilePartialUpdateProps
) => (
  <Mutate<UserProfile, unknown, void, PatchedUserProfile, void>
    verb="PATCH"
    path={`/api/user/me/profile`}
    {...props}
  />
);

export type UseUserMeProfilePartialUpdateProps = Omit<
  UseMutateProps<UserProfile, unknown, void, PatchedUserProfile, void>,
  "path" | "verb"
>;

/**
 * Performs a partial update of the current user profile
 */
export const useUserMeProfilePartialUpdate = (
  props: UseUserMeProfilePartialUpdateProps
) =>
  useMutate<UserProfile, unknown, void, PatchedUserProfile, void>(
    "PATCH",
    `/api/user/me/profile`,
    props
  );
